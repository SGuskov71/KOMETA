/*
 * File: app/view/input_control_PropertyForm.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('InputFormDesigner.view.input_control_PropertyForm', {
  extend: 'Ext.form.Panel',

  requires: [
    'Ext.form.Panel',
    'Ext.form.field.Display',
    'Ext.form.field.Number',
    'Ext.form.field.Checkbox',
    'Ext.form.field.ComboBox',
    'Ext.form.CheckboxGroup',
    'Ext.form.FieldSet',
    'Ext.form.field.TextArea',
    'Ext.grid.property.Grid'
  ],

  height: 639,
  id: 'input_control_PropertyForm',
  itemId: 'input_control_PropertyForm',
  width: 719,
  layout: 'auto',
  bodyBorder: false,
  title: 'Свойства элемента ввода',

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'form',
          autoScroll: true,
          bodyPadding: 7,
          layout: {
            type: 'vbox',
            align: 'stretch'
          },
          items: [
            {
              xtype: 'displayfield',
              itemId: 'DataField',
              fieldLabel: 'Код поля',
              labelWidth: 63
            },
            {
              xtype: 'textfield',
              itemId: 'Edt_Caption',
              width: 542,
              fieldLabel: 'Имя поля',
              labelWidth: 63,
              listeners: {
                change: {
                  fn: me.onEdt_TextBlockChange,
                  scope: me
                }
              }
            },
            {
              xtype: 'panel',
              border: false,
              title: '',
              layout: {
                type: 'hbox',
                align: 'stretch'
              },
              items: [
                {
                  xtype: 'numberfield',
                  itemId: 'labelWidth',
                  margin: '3 3 3 0',
                  fieldLabel: 'Ширина подписи',
                  labelWidth: 105,
                  listeners: {
                    change: {
                      fn: me.onLabelWidthChange,
                      scope: me
                    }
                  }
                },
                {
                  xtype: 'numberfield',
                  itemId: 'ControlWidth',
                  margin: 3,
                  fieldLabel: 'Ширина элемента ввода',
                  labelWidth: 150,
                  listeners: {
                    change: {
                      fn: me.onNumberfieldChange,
                      scope: me
                    }
                  }
                }
              ]
            },
            {
              xtype: 'checkboxfield',
              flex: 1,
              hidden: true,
              itemId: 'ChkShowLabel',
              fieldLabel: '',
              boxLabel: 'Показывать подпись',
              listeners: {
                change: {
                  fn: me.onChkHideLabelChange,
                  scope: me
                }
              }
            },
            {
              xtype: 'combobox',
              itemId: 'ComboInputType',
              margin: '3 3 3 0',
              width: 354,
              fieldLabel: 'Способ ввода',
              editable: false,
              displayField: 'Caption',
              queryMode: 'local',
              valueField: 'xtype',
              listeners: {
                change: {
                  fn: me.onComboboxChange,
                  scope: me
                }
              }
            },
            {
              xtype: 'checkboxgroup',
              maxWidth: 550,
              fieldLabel: '',
              items: [
                {
                  xtype: 'checkboxfield',
                  itemId: 'ChkHidden',
                  fieldLabel: '',
                  boxLabel: 'Скрыть на форме',
                  listeners: {
                    change: {
                      fn: me.onCheckboxfieldChange,
                      scope: me
                    }
                  }
                },
                {
                  xtype: 'checkboxfield',
                  itemId: 'ChkReadOnly',
                  fieldLabel: '',
                  boxLabel: 'Только для чтения',
                  listeners: {
                    change: {
                      fn: me.onCheckboxfieldChange1,
                      scope: me
                    }
                  }
                },
                {
                  xtype: 'checkboxfield',
                  itemId: 'ChkMandatory',
                  fieldLabel: '',
                  boxLabel: 'Обязательно к заполнению',
                  listeners: {
                    change: {
                      fn: me.onChkMandatoryChange,
                      scope: me
                    }
                  }
                }
              ]
            },
            {
              xtype: 'triggerfield',
              onTriggerClick: function(evnt) {
                var me=this;
                var win = SelectValSlv({sysname: 'sv_mb_object_select', ExtFilterWhereCond: '', object_Caption: 'Выбор объекта для создания формы ввода', HelpContext: ''});
                win.addListener('ValSlvSelected', function (context, SelID, SelDescr) {
                  Common_class.get_sysname(SelID.id_object, function (response, options) {
                    var sysname = response;
                    var input_control_PropertyForm = me.findParentByType('#input_control_PropertyForm');
                    input_control_PropertyForm.rawData.SLVObject = sysname;
                    input_control_PropertyForm.rawData.SLVObjectDescr = SelDescr;

                    me.setValue(SelDescr);
                    var mainContainer = me.findParentByType('#DesignMainContainer');
                    mainContainer.modified=true;

                    if (input_control_PropertyForm.rawData.InputType == 'pickerfield') {
                      if ((input_control_PropertyForm.rawData.SLVObject4Display == undefined) ||
                      (trim(input_control_PropertyForm.rawData.SLVObject4Display) == '')) {
                        input_control_PropertyForm.rawData.SLVObject4Display = sysname;
                        input_control_PropertyForm.rawData.SLVObjectDescr4Display = SelDescr;
                        input_control_PropertyForm.down('#SelectSLVObject4Display').setValue(input_control_PropertyForm.rawData.SLVObjectDescr4Display);
                      }
                    }
                  }
                  );
                });

              },
              ClearFunction: function() {
                var input_control_PropertyForm = this.findParentByType('#input_control_PropertyForm');
                input_control_PropertyForm.down('#SelectSLVObject').setValue(null);
                input_control_PropertyForm.rawData.SLVObject = null;
                input_control_PropertyForm.rawData.SLVObjectDescr = null;

                input_control_PropertyForm.rawData.SLVObject4Display = null;
                input_control_PropertyForm.rawData.SLVObjectDescr4Display = null;
                input_control_PropertyForm.down('#SelectSLVObject4Display').setValue(null);
              },
              hidden: true,
              itemId: 'SelectSLVObject',
              fieldLabel: 'Словарный объект',
              labelWidth: 110,
              editable: false,
              triggerCls: 'x-form-search-trigger'
            },
            {
              xtype: 'triggerfield',
              onTriggerClick: function(evnt) {
                var me=this;
                var win = SelectValSlv({sysname: 'sv_mb_object_select', ExtFilterWhereCond: '', object_Caption: 'Выбор объекта для создания формы ввода', HelpContext: ''});
                win.addListener('ValSlvSelected', function (context, SelID, SelDescr) {
                  Common_class.get_sysname(SelID.id_object, function (response, options) {
                    var sysname = response;
                    var input_control_PropertyForm = me.findParentByType('#input_control_PropertyForm');
                    input_control_PropertyForm.rawData.SLVObject4Display = sysname;
                    input_control_PropertyForm.rawData.SLVObjectDescr4Display = SelDescr;
                    var mainContainer = me.findParentByType('#DesignMainContainer');
                    mainContainer.modified=true;

                    me.setValue(SelDescr);
                    if (input_control_PropertyForm.rawData.InputType == 'pickerfield') {
                      if ((input_control_PropertyForm.rawData.SLVObject == undefined) ||
                      (trim(input_control_PropertyForm.rawData.SLVObjectDescr) == '')) {
                        input_control_PropertyForm.rawData.SLVObject = sysname;
                        input_control_PropertyForm.rawData.SLVObjectDescr = SelDescr;
                        input_control_PropertyForm.down('#SelectSLVObject').setValue(input_control_PropertyForm.rawData.SLVObjectDescr4Display);
                      }
                    }
                  }
                  );
                });

              },
              ClearFunction: function() {
                var input_control_PropertyForm = this.findParentByType('#input_control_PropertyForm');
                input_control_PropertyForm.rawData.SLVObject4Display = null;
                input_control_PropertyForm.rawData.SLVObjectDescr4Display = null;
                input_control_PropertyForm.down('#SelectSLVObject4Display').setValue(null);

              },
              hidden: true,
              itemId: 'SelectSLVObject4Display',
              width: 542,
              fieldLabel: 'Словарный объект для начального отображения',
              labelWidth: 200,
              editable: false,
              triggerCls: 'x-form-search-trigger'
            },
            {
              xtype: 'textfield',
              hidden: true,
              itemId: 'ExtFilterWhereCond',
              width: 544,
              fieldLabel: 'Ограничение для словарей',
              listeners: {
                change: {
                  fn: me.onValidateConditionChange3,
                  scope: me
                }
              }
            },
            {
              xtype: 'fieldset',
              itemId: 'ValidateConditionPanel',
              title: 'Проверка при вводе',
              layout: {
                type: 'hbox',
                align: 'stretchmax'
              },
              items: [
                {
                  xtype: 'textfield',
                  flex: 1,
                  itemId: 'ValidateCondition',
                  fieldLabel: 'Условие',
                  labelWidth: 50,
                  listeners: {
                    change: {
                      fn: me.onValidateConditionChange,
                      scope: me
                    }
                  }
                },
                {
                  xtype: 'textfield',
                  flex: 1,
                  itemId: 'ValidateConditionMessage',
                  fieldLabel: 'Сообщение',
                  labelWidth: 63,
                  listeners: {
                    change: {
                      fn: me.onValidateConditionChange4,
                      scope: me
                    }
                  }
                }
              ]
            },
            {
              xtype: 'textfield',
              itemId: 'DefaultValue',
              width: 544,
              fieldLabel: 'Значение по умолчанию',
              labelWidth: 150,
              listeners: {
                change: {
                  fn: me.onValidateConditionChange2,
                  scope: me
                }
              }
            },
            {
              xtype: 'textareafield',
              itemId: 'OnBlurScript',
              width: 544,
              fieldLabel: 'Выполнить по окончании ввода',
              labelWidth: 120,
              rows: 3,
              listeners: {
                change: {
                  fn: me.onValidateConditionChange1,
                  scope: me
                }
              }
            }
          ]
        },
        {
          xtype: 'propertygrid',
          itemId: 'ControlProps',
          autoScroll: true,
          bodyBorder: false,
          title: 'Дополнительные свойства контрола ввода',
          nameColumnWidth: 200,
          listeners: {
            beforerender: {
              fn: me.onPropertygridBeforeRender,
              scope: me
            },
            propertychange: {
              fn: me.onControlPropsPropertyChange,
              scope: me
            }
          }
        }
      ],
      listeners: {
        afterrender: {
          fn: me.onInput_control_PropertyFormAfterRender,
          scope: me
        }
      }
    });

    me.callParent(arguments);
  },

  onEdt_TextBlockChange: function(field, newValue, oldValue, eOpts) {
    var mainContainer = field.ownerCt.findParentByType('#DesignMainContainer');
    mainContainer.modified=true;
    this.rawData.Caption=newValue;
    if(this.needUpdateTree==true){
      if(trim(this.rawData.Caption)=='')
        this.record.set('text', mainContainer.MICaption_Control);
      else
        this.record.set('text', this.rawData.Caption);
      this.record.commit();
      this.rawData.text=this.rawData.Caption;
    }
  },

  onLabelWidthChange: function(field, newValue, oldValue, eOpts) {
    this.rawData.labelWidth=newValue;
    var mainContainer = field.ownerCt.findParentByType('#DesignMainContainer');
    mainContainer.modified=true;

  },

  onNumberfieldChange: function(field, newValue, oldValue, eOpts) {
    this.rawData.ControlWidth=newValue;
    var mainContainer = field.ownerCt.findParentByType('#DesignMainContainer');
    mainContainer.modified=true;

  },

  onChkHideLabelChange: function(field, newValue, oldValue, eOpts) {
    this.rawData.ShowLabel=newValue;
    var mainContainer = field.ownerCt.findParentByType('#DesignMainContainer');
    mainContainer.modified=true;

  },

  onComboboxChange: function(field, newValue, oldValue, eOpts) {
    if(this.needUpdateTree==true){
      this.rawData.InputType=newValue;
      var mainContainer = field.ownerCt.findParentByType('#DesignMainContainer');
    mainContainer.modified=true;

      var ControlProps=mainContainer.down('#ControlProps');
      var AdditionalProps=mainContainer.GetAdditionalControlDefaultProps( newValue);
      if((this.rawData.ControlProps!=undefined)||(AdditionalProps!=undefined)){
        //При типа ввода ввода добавить в "Дополнительные свойства" те которые определены для этого элемента ввода и удалить те которых нет.
        var TempObj={};
        for(var key in AdditionalProps){
          if((this.rawData.ControlProps!=undefined)&&(this.rawData.ControlProps[key]!=undefined)){
            TempObj[key]=this.rawData.ControlProps[key];
          }else{
            TempObj[key]=AdditionalProps[key];
          }
        }
        this.rawData.ControlProps=TempObj;
        ControlProps.setSource(this.rawData.ControlProps);
      }else{
        ControlProps.setSource({});
      }

    }
    this.SetVisibleSelectSLVObject();
  },

  onCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
    this.rawData.hidden=newValue;
    var mainContainer = field.ownerCt.findParentByType('#DesignMainContainer');
    mainContainer.modified=true;

  },

  onCheckboxfieldChange1: function(field, newValue, oldValue, eOpts) {
    this.rawData.ReadOnly=newValue;
    var mainContainer = field.ownerCt.findParentByType('#DesignMainContainer');
    mainContainer.modified=true;

  },

  onChkMandatoryChange: function(field, newValue, oldValue, eOpts) {
    this.rawData.Mandatory=newValue;
    var mainContainer = field.ownerCt.findParentByType('#DesignMainContainer');
    mainContainer.modified=true;

  },

  onValidateConditionChange3: function(field, newValue, oldValue, eOpts) {
    this.rawData.ExtFilterWhereCond=newValue;
    var mainContainer = field.ownerCt.findParentByType('#DesignMainContainer');
    mainContainer.modified=true;

  },

  onValidateConditionChange: function(field, newValue, oldValue, eOpts) {
    this.rawData.ValidateCondition=newValue;
    var mainContainer = field.ownerCt.findParentByType('#DesignMainContainer');
    mainContainer.modified=true;

  },

  onValidateConditionChange4: function(field, newValue, oldValue, eOpts) {
    this.rawData.ValidateConditionMessage=newValue;
    var mainContainer = field.ownerCt.findParentByType('#DesignMainContainer');
    mainContainer.modified=true;

  },

  onValidateConditionChange2: function(field, newValue, oldValue, eOpts) {
    this.rawData.DefaultValue=newValue;
    var mainContainer = field.ownerCt.findParentByType('#DesignMainContainer');
    mainContainer.modified=true;

  },

  onValidateConditionChange1: function(field, newValue, oldValue, eOpts) {
    this.rawData.OnBlurScript=newValue;
    var mainContainer = field.ownerCt.findParentByType('#DesignMainContainer');
    mainContainer.modified=true;

  },

  onPropertygridBeforeRender: function(component, eOpts) {
    var cols = component.getView().getHeaderCt().getGridColumns();
    cols[0].setText("Свойство");
    cols[1].setText("Значение");
  },

  onControlPropsPropertyChange: function(source, recordId, value, oldValue, eOpts) {
    this.rawData.ControlProps[recordId]=value;
    var mainContainer = field.ownerCt.findParentByType('#DesignMainContainer');
    mainContainer.modified=true;

  },

  onInput_control_PropertyFormAfterRender: function(component, eOpts) {


    this.down('#SelectSLVObject').getEl().on('contextmenu',this.OnClearContextmenu);
    this.down('#SelectSLVObject4Display').getEl().on('contextmenu',this.OnClearContextmenu);
  },

  LoadNodeValues: function(rawData, record) {
    this.needUpdateTree=false; //нужно для отключения переписывания текста в дереве при присвоении значений текста
    this.rawData = rawData;
    this.record = record;
    this.rawData.leaf=true;
    var mainContainer = this.findParentByType('#DesignMainContainer');
    this.down('#Edt_Caption').setValue(rawData.Caption);
    this.down('#ComboInputType').setValue(rawData.InputType);
    this.down('#DataField').setValue(rawData.DataField);
    this.down('#SelectSLVObject').setValue(rawData.SLVObjectDescr);
    this.down('#SelectSLVObject4Display').setValue(rawData.SLVObjectDescr4Display);
    this.down('#ExtFilterWhereCond').setValue(rawData.ExtFilterWhereCond);
    this.down('#ChkHidden').setValue(rawData.hidden);
    this.down('#ChkReadOnly').setValue(rawData.ReadOnly);
    this.down('#ChkMandatory').setValue(rawData.Mandatory);
    this.down('#ChkShowLabel').setValue(rawData.ShowLabel);
    this.down('#labelWidth').setValue(rawData.labelWidth);
    this.down('#ControlWidth').setValue(rawData.ControlWidth);

    this.down('#ValidateCondition').setValue(rawData.ValidateCondition);
    if (rawData.ValidateConditionMessage==undefined){
      rawData.ValidateConditionMessage='Ошибка проверки при вводе';
    }
    this.down('#ValidateConditionMessage').setValue(rawData.ValidateConditionMessage);

    this.down('#DefaultValue').setValue(rawData.DefaultValue);
    this.down('#OnBlurScript').setValue(rawData.OnBlurScript);
    var ControlProps=mainContainer.down('#ControlProps');
    var AdditionalProps=mainContainer.GetAdditionalControlDefaultProps( rawData.InputType);
    if((rawData.ControlProps!=undefined)||(AdditionalProps!=undefined)){
      //При открытии формы ввода добавить в "Дополнительные свойства" те которые определены для этого элемента ввода и удалить те которых нет.
      var TempObj={};
      for(var key in AdditionalProps){
        if((rawData.ControlProps!=undefined)&&(rawData.ControlProps[key]!=undefined)){
          TempObj[key]=rawData.ControlProps[key];
        }else{
          TempObj[key]=AdditionalProps[key];
        }
      }
      rawData.ControlProps=TempObj;
      ControlProps.setSource(rawData.ControlProps);
    }else{
      ControlProps.setSource({});
    }
    //this.down('#').setValue(rawData.);

    this.SetVisibleSelectSLVObject();
    this.needUpdateTree=true;
  },

  SetVisibleSelectSLVObject: function() {
    var mainContainer = this.findParentByType('#DesignMainContainer');
    this.down('#SelectSLVObject').hide();
    this.down('#SelectSLVObject4Display').hide();
    this.down('#ExtFilterWhereCond').hide();
    this.down('#ValidateConditionPanel').show();
    if((this.rawData.InputType=='combobox')||(this.rawData.InputType=='pickerfield')){
        this.down('#ValidateConditionPanel').hide();
      this.down('#SelectSLVObject').show();
      if (this.rawData.InputType == 'pickerfield'){
        this.down('#SelectSLVObject4Display').show();
        this.down('#ExtFilterWhereCond').show();
      }
    } if (this.rawData.InputType=='datefield'){
          this.down('#ValidateConditionPanel').hide();

    }
    else{
    }
  },

  OnClearContextmenu: function(e, component, obj) {
    if (Ext.getDom(component).name != null)
    {
      e.preventDefault();
      var target = e.getTarget();
      var cmp = findComponentByElement(target);
      var contextMenu = new Ext.menu.Menu({
        items: [{
          text: 'Очистить',
          handler: function (item) {
            var obj = item.cmp;
            obj.ClearFunction();
          },
          cmp: cmp
        }]
      });
      contextMenu.showAt(e.getXY());
    }

  }

});