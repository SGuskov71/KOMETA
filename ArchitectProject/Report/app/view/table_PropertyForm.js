/*
 * File: app/view/table_PropertyForm.js
 *
 * This file was generated by Sencha Architect version 3.5.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Report.view.table_PropertyForm', {
    extend: 'Ext.form.Panel',

    requires: [
        'Ext.form.field.Number',
        'Ext.form.RadioGroup',
        'Ext.form.field.Radio',
        'Ext.panel.Panel',
        'Ext.form.field.TextArea',
        'Ext.panel.Tool'
    ],

    itemId: 'table_PropertyForm',
    autoScroll: true,
    bodyPadding: 10,
    title: 'Свойства таблицы',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'container',
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'numberfield',
                            itemId: 'TabelWidth',
                            margin: 3,
                            fieldLabel: 'Ширина (см)',
                            labelWidth: 80,
                            listeners: {
                                change: {
                                    fn: me.onTabelWidthChange,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'radiogroup',
                    maxWidth: 650,
                    padding: 3,
                    fieldLabel: 'Выравнивание',
                    items: [
                        {
                            xtype: 'radiofield',
                            itemId: 'RB_LEFT',
                            boxLabel: 'По левому краю',
                            listeners: {
                                change: {
                                    fn: me.onRadiofieldChange,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'radiofield',
                            itemId: 'RB_CENTER',
                            boxLabel: 'По центру',
                            listeners: {
                                change: {
                                    fn: me.onRadiofieldChange2,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'radiofield',
                            itemId: 'RB_RIGHT',
                            margin: '0 0 0 -20',
                            boxLabel: 'По правому краю',
                            listeners: {
                                change: {
                                    fn: me.onRadiofieldChange1,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'radiofield',
                            itemId: 'RB_MARGINS',
                            boxLabel: 'По ширине',
                            listeners: {
                                change: {
                                    fn: me.onRadiofieldChange3,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'container',
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'numberfield',
                            itemId: 'HeaderHeight',
                            margin: 3,
                            fieldLabel: 'Высота заголовка (см)',
                            labelWidth: 150,
                            listeners: {
                                change: {
                                    fn: me.onNumberfieldChange1,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'checkboxfield',
                            itemId: 'ChkShowTableHeader',
                            margin: '3 3 3 10',
                            fieldLabel: '',
                            boxLabel: 'Показывать заголовки столбцов',
                            checked: true,
                            listeners: {
                                change: {
                                    fn: me.onChkShowTableHeaderChange,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'checkboxfield',
                            itemId: 'ChkShowTableBorder',
                            margin: '3 3 3 10',
                            fieldLabel: '',
                            boxLabel: 'Показывать рамку',
                            checked: true,
                            listeners: {
                                change: {
                                    fn: me.onChkShowTableHeaderChange1,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'panel',
                    flex: 1,
                    itemId: 'PanelSQL',
                    padding: '5 0 0 0',
                    layout: 'fit',
                    title: 'Текст SQL-запроса',
                    items: [
                        {
                            xtype: 'textareafield',
                            itemId: 'EdtSQL',
                            listeners: {
                                change: {
                                    fn: me.onEdtSQLChange,
                                    scope: me
                                }
                            }
                        }
                    ],
                    tools: [
                        {
                            xtype: 'tool',
                            tooltip: 'Открыть текст запроса в отдельном окне',
                            type: 'maximize',
                            listeners: {
                                click: {
                                    fn: me.onToolClick,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'textareafield',
                    itemId: 'EdtSQLConditions1',
                    fieldLabel: 'Дополнительные условия запроса',
                    labelWidth: 110,
                    rows: 6,
                    listeners: {
                        change: {
                            fn: me.onEdtSQLConditionsChange11,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'checkboxfield',
                    itemId: 'ChkShowError',
                    fieldLabel: '',
                    boxLabel: 'Выводить сообщение об ошибке выполнения запроса',
                    listeners: {
                        change: {
                            fn: me.onChkShowErrorChange,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'checkboxfield',
                    itemId: 'ChkShowEmptyMessage',
                    fieldLabel: '',
                    boxLabel: 'Выводить сообщение о пустом результате выполнения запроса',
                    listeners: {
                        change: {
                            fn: me.onChkShowEmptyMessageChange,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'checkboxfield',
                    itemId: 'ChkShowIfEmptyData',
                    fieldLabel: '',
                    boxLabel: 'Формировать таблицу при пустом результате выполнения запроса',
                    listeners: {
                        change: {
                            fn: me.onChkShowIfEmptyDataChange,
                            scope: me
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },

    onTabelWidthChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.TabelWidth=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        if(newValue==true)
        {
            field.ownerCt.down('#RB_RIGHT').setValue(false);
            field.ownerCt.down('#RB_CENTER').setValue(false);
            field.ownerCt.down('#RB_MARGINS').setValue(false);
            this.rawData.TableAlignment=field.itemId;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;
        }
    },

    onRadiofieldChange2: function(field, newValue, oldValue, eOpts) {
        if(newValue==true)
        {
            field.ownerCt.down('#RB_RIGHT').setValue(false);
            field.ownerCt.down('#RB_LEFT').setValue(false);
            field.ownerCt.down('#RB_MARGINS').setValue(false);
            this.rawData.TableAlignment=field.itemId;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;
        }
    },

    onRadiofieldChange1: function(field, newValue, oldValue, eOpts) {
        if(newValue==true)
        {
            field.ownerCt.down('#RB_LEFT').setValue(false);
            field.ownerCt.down('#RB_CENTER').setValue(false);
            field.ownerCt.down('#RB_MARGINS').setValue(false);
            this.rawData.TableAlignment=field.itemId;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;
        }
    },

    onRadiofieldChange3: function(field, newValue, oldValue, eOpts) {
        if(newValue==true)
        {
            field.ownerCt.down('#RB_RIGHT').setValue(false);
            field.ownerCt.down('#RB_CENTER').setValue(false);
            field.ownerCt.down('#RB_LEFT').setValue(false);
            this.rawData.TableAlignment=field.itemId;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;
        }
    },

    onNumberfieldChange1: function(field, newValue, oldValue, eOpts) {
        this.rawData.HeaderHeight=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onChkShowTableHeaderChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.ShowTableHeader=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onChkShowTableHeaderChange1: function(field, newValue, oldValue, eOpts) {
        this.rawData.ShowTableBorder=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onEdtSQLChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.SQL=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onToolClick: function(tool, e, eOpts) {
        var table_PropertyForm=tool.findParentByType('#table_PropertyForm');

        SQLEditor(table_PropertyForm.down('#EdtSQL').getValue(),function(SQLText)
                  {
                      table_PropertyForm.down('#EdtSQL').setValue(SQLText);
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

                      //table_PropertyForm.rawData.SQL=SQLText;
                  }
                 );

    },

    onEdtSQLConditionsChange11: function(field, newValue, oldValue, eOpts) {
        this.rawData.SQLConditions=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onChkShowErrorChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.ShowError=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onChkShowEmptyMessageChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.ShowEmptyMessage=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onChkShowIfEmptyDataChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.ShowIfEmptyData=newValue;
        var mainContainer = field.findParentByType('#DesignReportMainContainer');
        mainContainer.modified = true;

    },

    LoadNodeValues: function(rawData) {
        this.rawData=rawData;
        this.down('#EdtSQL').setValue(rawData.SQL);
        this.down('#ChkShowTableHeader').setValue(rawData.ShowTableHeader);
        this.down('#ChkShowTableBorder').setValue(rawData.ShowTableBorder);
        this.down('#ChkShowError').setValue(rawData.ShowError);
        this.down('#ChkShowEmptyMessage').setValue(rawData.ShowEmptyMessage);
        this.down('#ChkShowIfEmptyData').setValue(rawData.ShowIfEmptyData);
        this.down('#TabelWidth').setValue(rawData.TabelWidth);
        this.down('#HeaderHeight').setValue(rawData.HeaderHeight);
        this.down('#RB_RIGHT').setValue(false);
        this.down('#RB_LEFT').setValue(false);
        this.down('#RB_CENTER').setValue(false);
        this.down('#RB_MARGINS').setValue(false);
        if((this.rawData.TableAlignment!=undefined)&&(this.rawData.TableAlignment!='')){
            this.down('#'+this.rawData.TableAlignment).setValue(true);
        }else{
            this.down('#RB_RIGHT').setValue(true);
        }
    }

});