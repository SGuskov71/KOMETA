/*
 * File: app/view/images_PropertyForm.js
 *
 * This file was generated by Sencha Architect version 3.5.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Report.view.images_PropertyForm', {
    extend: 'Ext.panel.Panel',

    requires: [
        'Ext.form.RadioGroup',
        'Ext.form.field.Radio',
        'Ext.form.field.ComboBox',
        'Ext.form.FieldSet',
        'Ext.form.field.Number'
    ],

    height: 170,
    width: 600,
    autoScroll: true,
    bodyPadding: 10,
    title: 'Свойства графического элемента',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'radiogroup',
                    itemId: 'RG_DataSource',
                    width: '',
                    fieldLabel: 'Источник данных',
                    labelWidth: 110,
                    items: [
                        {
                            xtype: 'radiofield',
                            itemId: 'RB_Text',
                            width: 200,
                            boxLabel: 'Файл',
                            checked: true,
                            listeners: {
                                change: {
                                    fn: me.onRB_TextChange1,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'radiofield',
                            itemId: 'RB_SQL',
                            margin: '0 0 0 -50',
                            boxLabel: 'База данных',
                            listeners: {
                                change: {
                                    fn: me.onRB_SQLChange1,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'radiofield',
                            itemId: 'RB_Diagram',
                            margin: '0 0 0 -50',
                            boxLabel: 'Диаграмма',
                            listeners: {
                                change: {
                                    fn: me.onRB_SQLChange11,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'textfield',
                    itemId: 'EdtImagePath',
                    fieldLabel: 'Путь к файлу изображения',
                    labelWidth: 170,
                    listeners: {
                        change: {
                            fn: me.onEdtImagePathChange,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'combobox',
                    hidden: true,
                    itemId: 'ComboReportFieldList',
                    fieldLabel: 'Поле данных',
                    editable: false,
                    displayField: 'id',
                    forceSelection: true,
                    queryMode: 'local',
                    valueField: 'id',
                    listeners: {
                        change: {
                            fn: me.onComboReportFieldListChange1,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'combobox',
                    hidden: true,
                    itemId: 'ComboDiagram',
                    fieldLabel: 'Диаграмма',
                    editable: false,
                    displayField: 'id',
                    forceSelection: true,
                    queryMode: 'local',
                    valueField: 'id',
                    listeners: {
                        change: {
                            fn: me.onComboReportFieldListChange11,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'fieldset',
                    border: 1,
                    frame: false,
                    title: 'Размеры графического элемента в миллиметрах',
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'numberfield',
                            flex: 1,
                            itemId: 'EdtimgHeight',
                            padding: 6,
                            fieldLabel: 'Высота',
                            labelWidth: 50,
                            value: 20,
                            listeners: {
                                change: {
                                    fn: me.onEdtimgHeightChange,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'numberfield',
                            flex: 1,
                            itemId: 'EdtimgWidth',
                            padding: 6,
                            fieldLabel: 'Ширина',
                            labelWidth: 50,
                            value: 20,
                            listeners: {
                                change: {
                                    fn: me.onEdtimgWidthChange,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onRB_TextChange1: function(field, newValue, oldValue, eOpts) {
        if(newValue==true)
        {
            this.down('#ComboReportFieldList').hide();
            this.down('#ComboDiagram').hide();
            this.down('#EdtImagePath').show();
            field.ownerCt.down('#RB_SQL').setValue(false);
            field.ownerCt.down('#RB_Diagram').setValue(false);
            this.rawData.DataSource=field.itemId;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

        }

    },

    onRB_SQLChange1: function(field, newValue, oldValue, eOpts) {
        if(newValue==true)
        {
            this.down('#EdtImagePath').hide();
            this.down('#ComboDiagram').hide();
            this.down('#ComboReportFieldList').show();
            field.ownerCt.down('#RB_Text').setValue(false);
            field.ownerCt.down('#RB_Diagram').setValue(false);
            this.rawData.DataSource=field.itemId;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

        }
    },

    onRB_SQLChange11: function(field, newValue, oldValue, eOpts) {
        if(newValue==true)
        {
            this.down('#EdtImagePath').hide();
            this.down('#ComboReportFieldList').hide();
            this.down('#ComboDiagram').show();
            field.ownerCt.down('#RB_SQL').setValue(false);
            field.ownerCt.down('#RB_Text').setValue(false);
            this.rawData.DataSource=field.itemId;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

        }
    },

    onEdtImagePathChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.ImagePath=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onComboReportFieldListChange1: function(field, newValue, oldValue, eOpts) {
        this.rawData.DataField=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onComboReportFieldListChange11: function(field, newValue, oldValue, eOpts) {
        this.rawData.Diagram=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onEdtimgHeightChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.imgHeight=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onEdtimgWidthChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.imgWidth=newValue;
        var mainContainer = field.findParentByType('#DesignReportMainContainer');
        mainContainer.modified = true;

    },

    LoadNodeValues: function(rawData) {
        this.rawData = rawData;
        var mainContainer = this.findParentByType('#DesignReportMainContainer');
        var Combo = this.down('#ComboReportFieldList');
        this.down('#EdtImagePath').setValue(rawData.ImagePath);
        this.down('#EdtimgHeight').setValue(rawData.imgHeight);
        this.down('#EdtimgWidth').setValue(rawData.imgWidth);
        this.down('#RB_Text').setValue(false);
        this.down('#RB_SQL').setValue(false);
        if((this.rawData.DataSource!=undefined)&&(this.rawData.DataSource!='')){
            this.down('#'+this.rawData.DataSource).setValue(true);
        }else{
            this.down('#RB_Text').setValue(true);
        }
        Combo.getStore().removeAll();
        Ext.Array.each(mainContainer.ComboReportFieldListStoreData, function(value) {
            Combo.store.add({id: value});
        });
        Combo.setValue(rawData.DataField);

        var Combo = this.down('#ComboDiagram');
        if (Combo.store === undefined)
          Combo.store = new Ext.data.ArrayStore({
            fields: ['id','name'],
            data: []
          });


        Combo.getStore().removeAll();
        Ext.Array.each(mainContainer.ComboDiagramStoreData, function(value) {
            Combo.store.add( value);
        });
        Combo.setValue(rawData.Diagram);

    }

});