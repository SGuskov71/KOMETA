/*
 * File: app/view/VisualPanelMainContainer.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('VisualPanelMainContainer.view.VisualPanelMainContainer', {
  extend: 'Ext.container.Container',
  requires: [
    'Ext.form.Panel',
    'Ext.form.field.Text',
    'Ext.button.Button',
    'Ext.panel.Tool'
  ],
  height: 406,
  itemId: 'VisualPanelMainContainer',
  width: 652,
  layout: 'border',
  initComponent: function () {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'form',
          region: 'north',
          split: true,
          height: 123,
          itemId: 'PropertyPanel',
          autoScroll: true,
          bodyPadding: 10,
          title: 'Настройка свойств панели визуализации',
          items: [
            {
              xtype: 'textfield',
              anchor: '100%',
              itemId: 'VisualPanelDescription',
              fieldLabel: 'Описание панели визуализации',
              labelWidth: 200,
              listeners: {
                change: {
                  fn: me.onVisualPanelDescriptionChange,
                  scope: me
                }
              }
            },
            {
              xtype: 'textfield',
              anchor: '100%',
              itemId: 'VisualPanelCode',
              fieldLabel: 'Код панели визуализации',
              labelWidth: 200,
              listeners: {
                change: {
                  fn: me.onVisualPanelCodeChange,
                  scope: me
                }
              }
            },
            {
              xtype: 'container',
              items: [
                {
                  xtype: 'button',
                  handler: function (button, e) {
                    var VisualPanelMainContainer = button.findParentByType('#VisualPanelMainContainer');
                    var w = Ext.create("Params.view.EditParams", {Params: VisualPanelMainContainer.ConfigObject.VisualPanelParams});
                    w.mainContainer = VisualPanelMainContainer;
                    w.addEvents('BtnOk');
                    w.show();
                    w.addListener('BtnOk', function (VisualPanelParams) {
                      VisualPanelMainContainer.ConfigObject.VisualPanelParams = VisualPanelParams;
                      CloseWindow(w);
                    });
                  },
                  margin: '0 10 0 0',
                  text: 'Редактировать параметры панели визуализации'
                },
                {
                  xtype: 'button',
                  handler: function (button, e) {
                    var VisualPanelMainContainer = button.findParentByType('#VisualPanelMainContainer');
                    VisualPanelMainContainer.SaveVisualPanel(function () {
                      //alert('!!!');
                      ShowVisualPanel(VisualPanelMainContainer.VisualPanelListGrid, VisualPanelMainContainer.ConfigObject.Code, false, false, VisualPanelMainContainer.HelpContext);
                    });
                  },
                  itemId: 'btnPreview',
                  margin: '0 10 0 0 ',
                  padding: '',
                  text: 'Предпросмотр'
                }
              ]
            }
          ]
        },
        {
          xtype: 'panel',
          flex: 1,
          region: 'center',
          itemId: 'MaketPanel',
          layout: 'fit',
          title: 'Настройка макета панели визуализации',
          items: [
            {
              xtype: 'container',
              itemId: 'MaketContainer',
              layout: 'fit'
            }
          ],
          tools: [
            {
              xtype: 'tool',
              handler: function (event, toolEl, owner, tool) {
                var w = ShowList_viewpanel_maket(null);
                w.addListener('viewpanel_maket_Select', function (MaketCode) {
                  var p = owner.up('panel');
                  me.ConfigObject.MaketCode = MaketCode;
                  LoadVisualPanelMaket(p, MaketCode, true);
                });
              },
              itemId: 'tool_VisualPanelMaket',
              tooltip: 'Выбор макета панели отображения',
              type: 'gear'
            }
          ]
        }
      ]
    });

    me.callParent(arguments);
  },
  onVisualPanelDescriptionChange: function (field, newValue, oldValue, eOpts) {
    this.ConfigObject.Description = newValue;
  },
  onVisualPanelCodeChange: function (field, newValue, oldValue, eOpts) {
    this.ConfigObject.Code = newValue;
  },
  SaveVisualPanel: function (callBack) {
    var VisualPanelMainContainer = this;//button.findParentByType('#VisualPanelMainContainer');
    if (VisualPanelMainContainer.ConfigObject.VisualPanelParams == undefined) {
      Ext.MessageBox.alert('Ошибка', "Не выбран набор параметров");
      return false;
    }
    if (VisualPanelMainContainer.ConfigObject.MaketCode == undefined) {
      Ext.MessageBox.alert('Ошибка', "Не выбран макет панелей");
      return false;
    }
    Ext.MessageBox.wait({
      msg: 'Сохранение, ждите... ждите...',
      width: 300,
      wait: true,
      waitConfig: {interval: 100}
    });
    var MaketContainer = Ext.ComponentQuery.query('MaketContainer', VisualPanelMainContainer);
    MaketContainer = MaketContainer[0];
    var panelList = Ext.ComponentQuery.query('panel[VisualPanelItem= true]', MaketContainer);
    var MaketContainerObject = [];
    Ext.Array.each(panelList, function (_Panel) {
      MaketContainerObject[_Panel.itemId] = {};
      MaketContainerObject[_Panel.itemId].itemId = _Panel.itemId;
      MaketContainerObject[_Panel.itemId].VisualPanelItemTypes = _Panel.VisualPanelItemTypes;
      MaketContainerObject[_Panel.itemId].keyObjectId = _Panel.keyObjectId;
      MaketContainerObject[_Panel.itemId].name_type_view = _Panel.name_type_view;
      MaketContainerObject[_Panel.itemId].code_object_Descr = _Panel.code_object_Descr;
      MaketContainerObject[_Panel.itemId].title = _Panel.title;
      MaketContainerObject.push(MaketContainerObject[_Panel.itemId]);
    });
    VisualPanelMainContainer.ConfigObject.MaketContainerObject = MaketContainerObject;
    VisualPanel_class.SaveVisualPanel(VisualPanelMainContainer.ConfigObject,
            function (result) {
              Ext.MessageBox.hide();
              if ((result.success === false) && (result.result == 're_connect')) {
                alert(result.msg);
                window.onbeforeunload = null;
                findFirstWindow().window.location.href = __first_page;
                return false;
              }
              if (result.success == true) {
                if ((VisualPanelMainContainer.VisualPanelListGrid) &&
                        (VisualPanelMainContainer.VisualPanelListGrid != undefined) &&
                        (VisualPanelMainContainer.VisualPanelListGrid != null)) {
                  VisualPanelMainContainer.VisualPanelListGrid.getStore().load();
                }
                VisualPanelMainContainer.fireEvent('GridRefresh', VisualPanelMainContainer);
                VisualPanelMainContainer.ConfigObject.isNew = false;
                VisualPanelMainContainer.ConfigObject.id_viewpanel = result.result.id_viewpanel;
                VisualPanelMainContainer.ConfigObject.Code = result.result.code;
                VisualPanelMainContainer.down('#VisualPanelCode').setValue(VisualPanelMainContainer.ConfigObject.Code);
                if (callBack) {
                  Ext.MessageBox.hide();
                  callBack();
                } else {
                  Ext.MessageBox.alert("Результат выполнения ", result.msg);
                }
                return true;
              } else {
                Ext.MessageBox.alert('Ошибка', "Ошибка сохранения: " + result.msg);
                return false;
              }
            });
  },
  DisplayVisualPanelProps: function () {
    this.down('#VisualPanelDescription').setValue(this.ConfigObject.Description);
    this.down('#VisualPanelCode').setValue(this.ConfigObject.Code);

  },
  SetVisualPanelProps: function () {
    me = this;
    SetParamValuesAndRun(me.ConfigObject.VisualPanelParams, {}, me.ConfigObject.Code,
            function (FuncPar) {
              var MaketContainerObject = me.down('#MaketContainer');
              ShowVisualPanelContents(MaketContainerObject, me.ConfigObject, FuncPar.ParamValuesArray, false);
            });
  }

});