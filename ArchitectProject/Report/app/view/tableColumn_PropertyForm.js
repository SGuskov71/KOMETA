/*
 * File: app/view/tableColumn_PropertyForm.js
 *
 * This file was generated by Sencha Architect version 3.5.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Report.view.tableColumn_PropertyForm', {
    extend: 'Ext.form.Panel',

    requires: [
        'Ext.form.field.ComboBox',
        'Ext.form.field.Number'
    ],

    itemId: 'tableColumn_PropertyForm',
    bodyPadding: 10,
    title: 'Свойства столбца таблицы',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'textfield',
                    flex: 0,
                    itemId: 'ColumnHeader',
                    fieldLabel: 'Заголовок',
                    labelWidth: 110,
                    listeners: {
                        change: {
                            fn: me.onEtdLabelColumnChange,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'combobox',
                    itemId: 'ColumnHeaderSyle',
                    fieldLabel: 'Стиль заголовка',
                    labelWidth: 110,
                    displayField: 'id',
                    forceSelection: true,
                    queryMode: 'local',
                    valueField: 'id',
                    listeners: {
                        change: {
                            fn: me.onComboReportFieldListChange11,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'combobox',
                    itemId: 'ColumnDataField',
                    fieldLabel: 'Имя поля данных',
                    labelWidth: 110,
                    editable: false,
                    displayField: 'id',
                    forceSelection: true,
                    queryMode: 'local',
                    valueField: 'id',
                    listeners: {
                        change: {
                            fn: me.onComboReportFieldListChange2,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'combobox',
                    itemId: 'ColumnStyleField',
                    fieldLabel: 'Имя поля стиля',
                    labelWidth: 110,
                    editable: false,
                    displayField: 'id',
                    forceSelection: true,
                    queryMode: 'local',
                    valueField: 'id',
                    listeners: {
                        change: {
                            fn: me.onComboReportFieldListChange21,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'numberfield',
                    flex: 0,
                    itemId: 'WidthColumn',
                    fieldLabel: 'Ширина (см)',
                    labelWidth: 110,
                    listeners: {
                        change: {
                            fn: me.onEdtWidthColumnChange,
                            scope: me
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },

    onEtdLabelColumnChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.LabelColumn=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onComboReportFieldListChange11: function(field, newValue, oldValue, eOpts) {
        this.rawData.HeaderStyle=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;


    },

    onComboReportFieldListChange2: function(field, newValue, oldValue, eOpts) {
        this.rawData.DataFieldColumn=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;
        if(this.needUpdateTree==true){
            this.record.set('text', this.rawData.DataFieldColumn);
            this.record.commit();
            this.rawData.text=this.rawData.DataFieldColumn;
        }
    },

    onComboReportFieldListChange21: function(field, newValue, oldValue, eOpts) {
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;
        this.rawData.StyleFieldColumn=newValue;
        if(this.needUpdateTree==true){
            this.record.set('text', this.rawData.StyleFieldColumn);
            this.record.commit();
            this.rawData.text=this.rawData.StyleFieldColumn;
        }
    },

    onEdtWidthColumnChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.WidthColumn=newValue;
        var mainContainer = field.findParentByType('#DesignReportMainContainer');
        mainContainer.modified = true;

    },

    LoadNodeValues: function(rawData) {
        mainContainer = this.findParentByType('#DesignReportMainContainer');
        var StructureTree= mainContainer.down('#StructureTree') ;
        var Node= StructureTree.getSelectionModel().getSelection();// выбранный
        var       NodeTable=Node[0].parentNode;
        var TableRowData=NodeTable.raw;
        var SQLText=NodeTable.raw.SQL;


        Ext.MessageBox.wait({
            msg: 'Выполняется операция. Ждите...',
            width: 300,
            wait: true,
            waitConfig: {interval: 100}
        });
        Report_class.GetSQLFieldsList(SQLText, function(response, options) {
            Ext.MessageBox.hide();
            var result = response;
            if ((result.success === false) && (result.result == 're_connect')) {
                Ext.MessageBox.alert('Подключение',result.msg);
             window.onbeforeunload = null;    
            findFirstWindow().window.location.href = __first_page;
                return;
            }
            if (result.success) {
                //        var mainContainer= this.findParentByType('#DesignReportMainContainer');
                var tableColumn_Paroperty=mainContainer.down('#tableColumn_PropertyForm');
                var EdtDataFieldColumn = tableColumn_Paroperty.down('#ColumnDataField');
                var EdtStyleFieldColumn = tableColumn_Paroperty.down('#ColumnStyleField');
                EdtDataFieldColumn.store = new Ext.data.ArrayStore({
                    fields: ['id'],
                    data: []
                });
                EdtStyleFieldColumn.store = new Ext.data.ArrayStore({
                    fields: ['id'],
                    data: []
                });
                var arr=result.result;
                EdtStyleFieldColumn.getStore().removeAll();
                EdtDataFieldColumn.getStore().removeAll();
                Ext.Array.each(arr, function(value) {
                    EdtStyleFieldColumn.store.add({id: value});
                    EdtDataFieldColumn.store.add({id: value});
                });
                EdtDataFieldColumn.setValue(rawData.DataFieldColumn);
                EdtStyleFieldColumn.setValue(rawData.StyleFieldColumn);
            } else {
                Ext.MessageBox.alert("Ошибка выполнения SQL запроса : " , result.msg);
            }
        });

        Report_class.GetCellStylesArray( function(response, options) {
            var result = response;
            if ((result.success === false) && (result.result == 're_connect')) {
                Ext.MessageBox.alert('Подключение',result.msg);
             window.onbeforeunload = null;    
                findFirstWindow().window.location.href = __first_page;
                return;
            }
            if (result.success) {
                var arr=result.result;
                var arrkeys= Object.keys(arr);
                var tableColumn_Paroperty=mainContainer.down('#tableColumn_PropertyForm');
                var EdtHeaderSyle = tableColumn_Paroperty.down('#ColumnHeaderSyle');
                EdtHeaderSyle.store = new Ext.data.ArrayStore({
                    fields: ['id'],
                    data: []
                });
                EdtHeaderSyle.getStore().removeAll();

                Ext.Array.each(arrkeys, function(value) {
                    EdtHeaderSyle.store.add({id: value});
                });
            }
        });


        this.rawData=rawData;
        this.down('#WidthColumn').setValue(rawData.WidthColumn);
        this.down('#ColumnHeader').setValue(rawData.LabelColumn);
        this.down('#ColumnHeaderSyle').setValue(rawData.HeaderStyle);

    }

});