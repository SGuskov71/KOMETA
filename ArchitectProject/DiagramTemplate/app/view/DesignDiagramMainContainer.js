/*
 * File: app/view/DesignDiagramMainContainer.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('DiagramTemplate.view.DesignDiagramMainContainer', {
    extend: 'Ext.container.Container',

    requires: [
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.toolbar.Spacer',
        'Ext.toolbar.Separator',
        'Ext.menu.Menu',
        'Ext.menu.Item',
        'Ext.tree.Panel',
        'Ext.tree.View',
        'Ext.tree.plugin.TreeViewDragDrop'
    ],

    height: 513,
    id: 'DesignDiagramMainContainer',
    itemId: 'DesignDiagramMainContainer',
    width: 793,
    layout: 'border',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'panel',
                    region: 'west',
                    split: true,
                    title: 'Структура',
                    layout: {
                        type: 'vbox',
                        align: 'stretchmax'
                    },
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            height: '',
                            itemId: 'StructureToolBar',
                            autoScroll: true,
                            items: [
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        var NodeToInsert, IndexInsert;
                                        var mainContainer= button.findParentByType('#DesignDiagramMainContainer');
                                        var StructureTree= mainContainer.down('#StructureTree') ;
                                        var Node= StructureTree.getSelectionModel().getSelection();
                                        var ConfigObject={text: mainContainer.MICaption_Chart, expanded: false, leaf:true,children: null,
                                                ItemType: 'chart',
                                                iconCls: 'query',
                                                Description: mainContainer.MICaption_Chart,
                                                graph_name_style:'',
                                                graph_style:'',
                                                graph_color:'',
                                                graph_ref:'',
                                                SQL: '',
                                                Limit: 0
                                            };
                                        if(Node!= undefined){
                                            Node=Node[0];
                                            if((Node!= undefined)){
                                                if(Node.raw.ItemType=='diagram'){
                                                    IndexInsert=0;
                                                    NodeToInsert=Node;
                                                } else if(Node.raw.ItemType=='chart'){
                                                    IndexInsert =Node.parentNode.indexOf(Node)+1;
                                                    NodeToInsert=Node.parentNode;
                                                } else
                                                return;
                                            }else{
                                                NodeToInsert=StructureTree.getRootNode();
                                            IndexInsert =0;}
                                        }else{
                                            NodeToInsert=StructureTree.getRootNode();
                                        IndexInsert =0;}
                                        NodeToInsert.insertChild(IndexInsert, ConfigObject);

                                        var mainContainer = button.findParentByType('#DesignDiagramMainContainer');
                                        mainContainer.modified=true;

                                        StructureTree.store.sync();
                                    },
                                    frame: false,
                                    itemId: 'BtnAdd',
                                    iconCls: 'cls_add',
                                    text: '',
                                    tooltip: 'Добавить'
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        var StructureTree= button. findParentByType('#DesignDiagramMainContainer').down('#StructureTree') ;
                                        var Node= StructureTree.getSelectionModel().getSelection();
                                        if(Node!= undefined){
                                            Node=Node[0];
                                            if((Node!= undefined)&&(Node!=StructureTree.getRootNode())){
                                                var Node2Select= Node.previousSibling;
                                                if(Node2Select==undefined){Node2Select= Node.parentNode;}
                                                try {
                                                    Node.removeAll(true);

                                                    var mainContainer = button.findParentByType('#DesignDiagramMainContainer');
                                                    mainContainer.modified=true;

                                                } catch (e) {
                                                } finally {
                                                    try{
                                                        Node.remove(true);
                                                    } catch (e) {}
                                                    }
                                                    StructureTree.store.sync();
                                                    StructureTree.getSelectionModel().select(Node2Select);
                                                }}
                                    },
                                    disabled: true,
                                    itemId: 'BtnDel',
                                    iconCls: 'cls_del',
                                    text: '',
                                    tooltip: 'Удалить'
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        var mainContainer= button.findParentByType('#DesignDiagramMainContainer');
                                        var BtnCopy= mainContainer.down('#BtnCopy') ;
                                        var BtnDel= mainContainer.down('#BtnDel') ;
                                        if(BtnCopy.handler(button)==true){
                                            BtnDel.handler(button);
                                        }
                                    },
                                    disabled: true,
                                    itemId: 'BtnCut',
                                    iconCls: 'cls_cut',
                                    text: '',
                                    tooltip: 'Вырезать'
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        function GetConfObj(Node){
                                            var result= CopyObjectProps(Node.raw);
                                            if(Node.hasChildNodes( )==true){
                                                result.children= [];
                                                Ext.each(Node.childNodes, function (Child) {
                                                    var itm= GetConfObj(Child);
                                                    result.children.push(itm);
                                                });
                                            }else result.children=null;
                                            return result;
                                        }

                                        var mainContainer= button.findParentByType('#DesignDiagramMainContainer');
                                        var StructureTree= mainContainer.down('#StructureTree') ;
                                        var Node= StructureTree.getSelectionModel().getSelection();
                                        if(Node!= undefined){
                                            Node=Node[0];
                                            if((Node!= undefined)&&(Node!=StructureTree.getRootNode())){
                                                Ext.destroy(mainContainer.ClipboardItem);
                                                mainContainer.ClipboardItem=null;
                                                mainContainer.ClipboardItem=GetConfObj(Node);
                                                //mainContainer.down('#ClipboardContentsTxt').setText('В буфере: '+mainContainer.ClipboardItem.text);
                                                return true;
                                            }}
                                    },
                                    disabled: true,
                                    itemId: 'BtnCopy',
                                    iconCls: 'cls_copy',
                                    text: '',
                                    tooltip: 'Копировать'
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        var NodeToInsert, IndexInsert;
                                        var mainContainer= button.findParentByType('#DesignDiagramMainContainer');
                                        var StructureTree= mainContainer.down('#StructureTree') ;
                                        var Node= StructureTree.getSelectionModel().getSelection();
                                        if(Node!= undefined){
                                            Node=Node[0];
                                            if((Node!= undefined)){
                                                if(Node.raw.ItemType=='diagram'){
                                                    IndexInsert=0;
                                                    NodeToInsert=Node;
                                                } else if(Node.raw.ItemType=='chart'){
                                                    IndexInsert =Node.parentNode.indexOf(Node)+1;
                                                    NodeToInsert=Node.parentNode;
                                                } else
                                                return;
                                            }else
                                            {
                                                NodeToInsert=StructureTree.getRootNode();
                                            IndexInsert =0;}
                                        }else
                                        {
                                            NodeToInsert=StructureTree.getRootNode();
                                        IndexInsert =0;}
                                        var ConfObj= CopyObjectProps(mainContainer.ClipboardItem);
                                        ConfObj.expanded=false;
                                        NodeToInsert.insertChild(IndexInsert, ConfObj);

                                        var mainContainer = button.findParentByType('#DesignDiagramMainContainer');
                                        mainContainer.modified=true;


                                    },
                                    disabled: true,
                                    itemId: 'BtnPaste',
                                    iconCls: 'cls_paste',
                                    text: '',
                                    tooltip: 'Вставить'
                                },
                                {
                                    xtype: 'tbspacer',
                                    width: 5
                                },
                                {
                                    xtype: 'tbseparator'
                                },
                                {
                                    xtype: 'tbspacer',
                                    width: 5
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        var mainContainer = button.findParentByType('#DesignDiagramMainContainer');

                                        var diagram_PropertyForm=mainContainer.ArrayOfReportObjectTypes.diagram;
                                        var w=  Ext.create("Params.view.EditParams", {Params: diagram_PropertyForm.rawData.DiagramParams});
                                        w.mainContainer= mainContainer;
                                        w.addEvents('BtnOk');
                                        w.show();
                                        w.addListener('BtnOk', function(ReportParams) {
                                            diagram_PropertyForm.rawData.DiagramParams=ReportParams;

                                            var mainContainer = button.findParentByType('#DesignDiagramMainContainer');
                                            mainContainer.modified=true;

                                            CloseWindow(w);
                                        });

                                    },
                                    width: '',
                                    iconCls: 'cls_params',
                                    text: '',
                                    tooltip: 'Редактировать параметры диаграммы'
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {

                                    },
                                    iconCls: 'cls_preview',
                                    text: '',
                                    tooltip: 'Предпросмотр',
                                    menu: {
                                        xtype: 'menu',
                                        width: 200,
                                        items: [
                                            {
                                                xtype: 'menuitem',
                                                handler: function(item, e) {
                                                    var mainContainer= item.findParentByType('#DesignDiagramMainContainer');
                                                    mainContainer.PreviewTemplate(item.PreviewType);

                                                },
                                                text: 'Отдельный объект'
                                            },
                                            {
                                                xtype: 'menuitem',
                                                handler: function(item, e) {
                                                    var mainContainer= item.findParentByType('#DesignDiagramMainContainer');
                                                    mainContainer.PreviewTemplate(item.PreviewType);
                                                },
                                                PreviewType: '1',
                                                text: 'HTML-страница'
                                            },
                                            {
                                                xtype: 'menuitem',
                                                handler: function(item, e) {
                                                    var mainContainer= item.findParentByType('#DesignDiagramMainContainer');
                                                    mainContainer.PreviewTemplate(item.PreviewType);
                                                },
                                                PreviewType: '2',
                                                text: 'pChart'
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'treepanel',
                            flex: 1,
                            dock: 'left',
                            itemId: 'StructureTree',
                            width: 210,
                            viewConfig: {
                                autoScroll: true,
                                plugins: [
                                    Ext.create('Ext.tree.plugin.TreeViewDragDrop', {

                                    })
                                ]
                            },
                            listeners: {
                                afterrender: {
                                    fn: me.onStructureTreeAfterRender,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'panel',
                    flex: 1,
                    region: 'center',
                    itemId: 'PropPanel',
                    layout: 'fit',
                    items: [
                        {
                            xtype: 'panel',
                            itemId: 'PropertyContainer',
                            layout: 'fit',
                            header: false,
                            title: 'Свойства'
                        }
                    ]
                }
            ]
        });

        me.processDesignDiagramMainContainer(me);
        me.callParent(arguments);
    },

    processDesignDiagramMainContainer: function(config) {
        config.MICaption_Diagram='Диаграмма';
        config.MICaption_Chart='Ряд данных';
        return(config);
    },

    onStructureTreeAfterRender: function(component, eOpts) {
        component.getView().select(component.getRootNode());
    },

    SaveDiagramTemplate: function() {
        var mainContainer= this;
        mainContainer.modified=false;
        var StructureTree= mainContainer.down('#StructureTree') ;
        var RootNode= StructureTree.getRootNode();
        if(RootNode!= undefined){
            var Diagram_Template=mainContainer.DiagramObject.SaveDiagramNodeToJson(RootNode);
            Diagram_Template.id_Diagram=mainContainer.id_Diagram;
            Ext.MessageBox.wait({
                msg: 'Выполняется операция. Ждите...',
                width: 300,
                wait: true,
                waitConfig: {interval: 100}
            });
            DiagramTemplate_class.SaveDiagramTemplate(Diagram_Template,function(response, options) {
                Ext.MessageBox.hide();
                var result = response;
                if ((result.success === false) && (result.result == 're_connect')) {
                    Ext.MessageBox.alert('Подключение',result.msg);
                    window.onbeforeunload = null;
                    findFirstWindow().window.location.href = __first_page;
                    return;
                }
                if (result.success) {
                    if((mainContainer.grid_ListDiagramTemplate)&&(mainContainer.grid_ListDiagramTemplate!=undefined)&&
                       (mainContainer.grid_ListDiagramTemplate!=null)){
                        mainContainer.grid_ListDiagramTemplate.getStore().load();
                    }
                    mainContainer.codeDiagramTemplate=Diagram_Template.Code;
                    if (mainContainer.id_Diagram == undefined)
                        mainContainer.id_Diagram = result.result.id_diagram_template;
                    Ext.MessageBox.alert("Результат выполнения ", result.msg);
                } else {
                    Ext.MessageBox.alert("Ошибка сохранения: " , result.msg);
                }
            });
        }

    },

    PreviewTemplate: function(PreviewType) {
        var mainContainer= this;//button.findParentByType('#DesignDiagramMainContainer');
        if (!mainContainer.isNew)
        {
            mainContainer.SaveDiagramTemplate();
            mainContainer.DiagramObject.ComposeDiagramByTemplateInteractiveParamInput(null,
                                                                                      {param_list:{code:mainContainer.codeDiagramTemplate,
                 ParamValuesArray:{},
                 PreviewMode:PreviewType
                                                                                                  }
                                                                                      });
        }else
        {Ext.MessageBox.alert('Ошибка сохранения','Сначала надо сохранить шаблон');}
    }

});