/*
 * File: app/view/DesignMainContainer.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('InputFormDesigner.view.DesignMainContainer', {
  extend: 'Ext.container.Container',

  requires: [
    'Ext.toolbar.Toolbar',
    'Ext.button.Button',
    'Ext.menu.Menu',
    'Ext.menu.Item',
    'Ext.toolbar.Spacer',
    'Ext.toolbar.Separator',
    'Ext.tree.Panel',
    'Ext.tree.View',
    'Ext.tree.plugin.TreeViewDragDrop'
  ],

  height: 513,
  id: 'DesignMainContainer',
  itemId: 'DesignMainContainer',
  width: 783,
  layout: 'border',

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'panel',
          region: 'west',
          width: 195,
          dockedItems: [
            {
              xtype: 'toolbar',
              dock: 'top',
              itemId: 'StructureToolBar',
              items: [
                {
                  xtype: 'button',
                  itemId: 'BtnAdd',
                  iconCls: 'cls_add',
                  text: '',
                  tooltip: 'Добавить',
                  menu: {
                    xtype: 'menu',
                    width: 120,
                    items: [
                      {
                        xtype: 'menuitem',
                        handler: function(item, e) {
                          var DesignMainContainer=item.findParentByType('#DesignMainContainer');
                          var StructureTree= item. findParentByType('#DesignMainContainer').down('#StructureTree') ;
                          var Node= StructureTree.getSelectionModel().getSelection();
                          if(Node!= undefined){
                            Node=Node[0];
                            if(Node!= undefined){
                              var Props={};
                              for(var key in DesignMainContainer.AdditionalContainerDefaultProps){
                                Props[key]=DesignMainContainer.AdditionalContainerDefaultProps[key];
                              }
                              var ConfigObject={text: item.text, expanded: true, leaf:false,children: [],
                                  ItemType: 'container',
                                  iconCls: 'list',
                                  ShowBorder: true,
                                  ContainerProps:Props,
                                Layout:'auto'};
                              if((Node.raw.ItemType=='form')||(Node.raw.ItemType=='container')){
                                Node.appendChild(ConfigObject);
                              }else
                              if((Node.raw.ItemType=='input_control')||(Node.raw.ItemType=='label')){
                                var ParentNode=Node.parentNode;
                                var ItemIndex=ParentNode.indexOf(Node);
                                ParentNode.insertChild(ItemIndex, ConfigObject);
                              }
                              DesignMainContainer.modified=true;

                            }
                          }
                        },
                        itemId: 'MI_Container',
                        listeners: {
                          beforerender: {
                            fn: me.onMenuitemBeforeRender,
                            scope: me
                          }
                        }
                      },
                      {
                        xtype: 'menuitem',
                        handler: function(item, e) {
                          var DesignMainContainer=item.findParentByType('#DesignMainContainer');
                          var StructureTree= item. findParentByType('#DesignMainContainer').down('#StructureTree') ;
                          var Node= StructureTree.getSelectionModel().getSelection();
                          if(Node!= undefined){
                            Node=Node[0];
                            if(Node!= undefined){
                              var Props={};
                              for(var key in DesignMainContainer.AdditionalLabelDefaultProps){
                                Props[key]=DesignMainContainer.AdditionalLabelDefaultProps[key];
                              }
                              var ConfigObject={text: item.text, expanded: true, leaf:true,children: null,
                                  ItemType: 'label',
                                  iconCls: 'text',
                                  DefaultValue: 'Текст по умолчанию',
                                  DataField: 'label1',
                                  LabelProps:Props
                                };
                              if((Node.raw.ItemType=='form')||(Node.raw.ItemType=='container')){
                                Node.appendChild(ConfigObject);
                              }else
                              if((Node.raw.ItemType=='input_control')||(Node.raw.ItemType=='label')){
                                var ParentNode=Node.parentNode;
                                var ItemIndex=ParentNode.indexOf(Node);
                                ParentNode.insertChild(ItemIndex, ConfigObject);
                              }
                              DesignMainContainer.modified=true;

                            }
                          }
                        },
                        itemId: 'MI_Label',
                        listeners: {
                          beforerender: {
                            fn: me.onMenuitemBeforeRender1,
                            scope: me
                          }
                        }
                      },
                      {
                        xtype: 'menuitem',
                        handler: function(item, e) {
                          var DesignMainContainer=item.findParentByType('#DesignMainContainer');
                          var StructureTree= DesignMainContainer.down('#StructureTree') ;
                          var RootNode= StructureTree.getRootNode();
                          var Node= StructureTree.getSelectionModel().getSelection();
                          if(Node!= undefined){
                            Node=Node[0];
                            if(Node!= undefined){
                              var w=  Ext.create("InputFormDesigner.view.SelectFieldWindow", {id_object:RootNode.raw.id_object});
                              w.addEvents('BtnOk');
                              w.show();
                              w.addListener('BtnOk', function(SelectedRecords) {
                                var _InputType=  'textfield';
                                var PropsArray=DesignMainContainer.GetAdditionalControlDefaultProps( _InputType);
                                Ext.Array.each(SelectedRecords, function (SelectedRecordObj) {
                                  var SelectedRecord=SelectedRecordObj.raw;
                                  var ConfigObject=new Object({text: SelectedRecord.short_name, expanded: true, leaf:true,children: [],iconCls:'embedded_report',
                                      ItemType: 'input_control',
                                      DataField:SelectedRecord.fieldname,
                                      Caption: SelectedRecord.short_name,
                                      ValidateCondition: SelectedRecord.input_check_condition,
                                      Mandatory: SelectedRecord.mandatory,
                                      ReadOnly: SelectedRecord.is_field_readonly,
                                      ShowLabel:true,
                                      InputType: _InputType,
                                      ControlProps: new Object(),
                                      labelWidth: 150,
                                      ControlWidth:400
                                    });
                                  for(var key in PropsArray){
                                    ConfigObject.ControlProps[key]=PropsArray[key];
                                  }
                                  if((Node.raw.ItemType=='form')||(Node.raw.ItemType=='container')){
                                    Node.appendChild(ConfigObject);
                                  }else
                                  if((Node.raw.ItemType=='input_control')||(Node.raw.ItemType=='label')){
                                    var ParentNode=Node.parentNode;
                                    var ItemIndex=ParentNode.indexOf(Node);
                                    ParentNode.insertChild(ItemIndex, ConfigObject);
                                  }
                                  DesignMainContainer.modified=true;

                                });
                                CloseWindow(w);
                              });
                            };}
                        },
                        itemId: 'MI_Control',
                        listeners: {
                          beforerender: {
                            fn: me.onMenuitemBeforeRender2,
                            scope: me
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  xtype: 'button',
                  handler: function(button, e) {
                    function removeAllChildContainers(Node){
                      NodeChild=Node.firstChild;
                      while(NodeChild!=undefined){
                        if(NodeChild.hasChildNodes()==true){
                          removeAllChildContainers(NodeChild);
                        }
                        var tempNode=NodeChild;
                        NodeChild=NodeChild.nextSibling;
                        try {
                          tempNode.remove(true);
                        } catch (e) {}
                        }
                      }
                      var StructureTree= button. findParentByType('#DesignMainContainer').down('#StructureTree') ;

                      var mainContainer = button.findParentByType('#DesignMainContainer');
                      mainContainer.modified=true;

                      var Node= StructureTree.getSelectionModel().getSelection();
                      if(Node!= undefined){
                        Node=Node[0];
                        if((Node!= undefined)&&(Node!=StructureTree.getRootNode())){
                          var Node2Select= Node.previousSibling;
                          if(Node2Select==undefined){Node2Select= Node.parentNode;}
                          try {
                            removeAllChildContainers(Node);
                            Node.removeAll(true);
                          } catch (e) {
                          } finally {
                            try{
                              Node.remove(true);
                            } catch (e) {}
                            }
                            StructureTree.store.sync();
                            StructureTree.getSelectionModel().select(Node2Select);
                          }}
                  },
                  disabled: true,
                  itemId: 'BtnDel',
                  iconCls: 'cls_del',
                  text: '',
                  tooltip: 'Удалить'
                },
                {
                  xtype: 'button',
                  handler: function(button, e) {
                    var mainContainer= button.findParentByType('#DesignMainContainer');
                    mainContainer.modified=true;

                    var BtnCopy= mainContainer.down('#BtnCopy') ;
                    var BtnDel= mainContainer.down('#BtnDel') ;
                    if(BtnCopy.handler(button)==true){
                      BtnDel.handler(button);
                    }
                  },
                  disabled: true,
                  itemId: 'BtnCut',
                  iconCls: 'cls_cut',
                  text: '',
                  tooltip: 'Вырезать'
                },
                {
                  xtype: 'button',
                  handler: function(button, e) {
                    function GetConfObj(Node){
                      var result= CopyObjectProps(Node.raw);
                      if(Node.hasChildNodes( )==true){
                        result.children= [];
                        Ext.each(Node.childNodes, function (Child) {
                          var itm= GetConfObj(Child);
                          result.children.push(itm);
                        });
                      }else result.children=null;
                      return result;
                    }

                    var mainContainer= button.findParentByType('#DesignMainContainer');
                    mainContainer.modified=true;

                    var StructureTree= mainContainer.down('#StructureTree') ;
                    var Node= StructureTree.getSelectionModel().getSelection();
                    if(Node!= undefined){
                      Node=Node[0];
                      if((Node!= undefined)&&(Node!=StructureTree.getRootNode())){
                        Ext.destroy(mainContainer.ClipboardItem);
                        mainContainer.ClipboardItem=null;
                        mainContainer.ClipboardItem=GetConfObj(Node);
                        //mainContainer.down('#ClipboardContentsTxt').setText('В буфере: '+mainContainer.ClipboardItem.text);
                        return true;
                      }}
                  },
                  disabled: true,
                  itemId: 'BtnCopy',
                  iconCls: 'cls_copy',
                  text: '',
                  tooltip: 'Копировать'
                },
                {
                  xtype: 'button',
                  handler: function(button, e) {
                    var NodeToInsert, IndexInsert;
                    var mainContainer= button.findParentByType('#DesignMainContainer');
                    mainContainer.modified=true;

                    var StructureTree= mainContainer.down('#StructureTree') ;
                    var Node= StructureTree.getSelectionModel().getSelection();
                    if(Node!= undefined){
                      Node=Node[0];
                      if((Node!= undefined)){
                        if((mainContainer.ClipboardItem.ItemType=='container')||(mainContainer.ClipboardItem.ItemType=='label')
                        ||(mainContainer.ClipboardItem.ItemType=='input_control')){
                          if((Node.raw.ItemType=='form')||(Node.raw.ItemType=='container')) {
                            IndexInsert=0;
                            NodeToInsert=Node;
                          } else if((Node.raw.ItemType=='input_control')||(Node.raw.ItemType=='label')){
                            IndexInsert =Node.parentNode.indexOf(Node)+1;
                            NodeToInsert=Node.parentNode;
                          } else
                          return;
                        }else
                        return;
                        var ConfObj= CopyObjectProps(mainContainer.ClipboardItem);
                        ConfObj.expanded=false;
                        NodeToInsert.insertChild(IndexInsert, ConfObj);
                        StructureTree.store.sync();
                      }else
                      return;
                    }
                  },
                  disabled: true,
                  itemId: 'BtnPaste',
                  iconCls: 'cls_paste',
                  text: '',
                  tooltip: 'Вставить'
                },
                {
                  xtype: 'tbspacer',
                  width: 5
                },
                {
                  xtype: 'tbseparator'
                },
                {
                  xtype: 'tbspacer',
                  width: 5
                },
                {
                  xtype: 'button',
                  handler: function(button, e) {
                    var mainContainer= button.findParentByType('#DesignMainContainer');
                    var StructureTree= mainContainer.down('#StructureTree') ;
                    var RootNode= StructureTree.getRootNode();
                    if(RootNode!= undefined){
                      if (mainContainer.id_form!=undefined)
                      {
                        mainContainer.SaveForm(true, function() {
                          Run_operation(null
                          ,{func_name:'PreviewForm'
                            ,func_class_name:'Record_operation'
                            ,param_list:{id_form:mainContainer.id_form
                            }
                          });

                        });
                      }else
                      {Ext.MessageBox.alert('Ошибка предпросмотра','Сначала надо сохранить форму');}}
                  },
                  itemId: 'BtnPreview',
                  iconCls: 'cls_preview',
                  text: '',
                  tooltip: 'Предпросмотр'
                }
              ]
            }
          ],
          items: [
            {
              xtype: 'treepanel',
              itemId: 'StructureTree',
              width: 264,
              title: 'Структура',
              viewConfig: {
                autoScroll: true,
                plugins: [
                  Ext.create('Ext.tree.plugin.TreeViewDragDrop', {

                  })
                ]
              },
              listeners: {
                afterrender: {
                  fn: me.onStructureTreeAfterRender,
                  scope: me
                }
              }
            }
          ]
        },
        {
          xtype: 'panel',
          flex: 1,
          region: 'center',
          split: false,
          itemId: 'PropPanel',
          layout: 'fit',
          items: [
            {
              xtype: 'panel',
              itemId: 'PropertyContainer',
              layout: 'fit',
              header: false,
              title: 'Свойства'
            }
          ]
        }
      ]
    });

    me.processDesignMainContainer(me);
    me.callParent(arguments);
  },

  processDesignMainContainer: function(config) {
    config.MICaption_Label='Надпись';
    config.MICaption_Container='Контейнер';
    config.MICaption_Control='Элемент ввода';
    return(config);
  },

  onMenuitemBeforeRender: function(component, eOpts) {
    component.setText(this.MICaption_Container);

  },

  onMenuitemBeforeRender1: function(component, eOpts) {
    component.setText(this.MICaption_Label);
  },

  onMenuitemBeforeRender2: function(component, eOpts) {
    component.setText(this.MICaption_Control);
  },

  onStructureTreeAfterRender: function(component, eOpts) {
    component.getView().select(component.getRootNode());
  },

  SaveForm: function(SuccessSilent, callback) {
    var mainContainer= this;
    mainContainer.modified=false;

    var StructureTree= mainContainer.down('#StructureTree') ;
    var RootNode= StructureTree.getRootNode();
    if(RootNode!= undefined){
      var InputFormTemplate=mainContainer.FormObject.SaveNodeToJson(RootNode);
      Ext.MessageBox.wait({
        msg: 'Выполняется сохранение формы, ждите...',
        width: 300,
        wait: true,
        waitConfig: {interval: 100}
      });
      InputFormTemplate.id_form=mainContainer.id_form;
      InputFormTemplate.id_object=RootNode.raw.id_object;
      InputForm_class.SaveInputFormTemplate(InputFormTemplate,function(response, options) {
        Ext.MessageBox.hide();
        var result = response;

        if ((result.success === false) && (result.result == 're_connect')) {
          Ext.MessageBox.alert('Подключение',result.msg);
          window.onbeforeunload = null;
          findFirstWindow().window.location.href = __first_page;
          return;
        }
        if (result.success) {
          if((mainContainer.grid_List)&&(mainContainer.grid_List!=undefined)&&(mainContainer.grid_List!=null)){
            mainContainer.grid_List.getStore().load();
          }
          var mainWindow=mainContainer.up('window');
          mainWindow.fireEvent('GridRefresh', mainWindow);

          mainContainer.id_form=result.result;
          Ext.MessageBox.alert("Результат выполнения ", result.msg);
          if(SuccessSilent==true)
            Ext.MessageBox.hide();
          if (callback) {
            callback();
          }
          return true;
        } else {
          Ext.MessageBox.alert("Ошибка сохранения: " , result.msg);
        }


      });
    }

  },

  GetAdditionalControlDefaultProps: function(ControlXtype) {
    var InputControlPropsArray=this.InputControlPropsArray;

    var res=undefined;
    for (var i = 0; i < InputControlPropsArray.length; i++){
      if (InputControlPropsArray[i].xtype == ControlXtype){
        res=InputControlPropsArray[i];
        break;
      }
    }
    if(res!=undefined)
      return res.Props;
    else
      return null;
  }

});