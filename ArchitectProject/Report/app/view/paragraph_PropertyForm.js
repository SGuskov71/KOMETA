/*
 * File: app/view/paragraph_PropertyForm.js
 *
 * This file was generated by Sencha Architect version 3.5.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Report.view.paragraph_PropertyForm', {
    extend: 'Ext.form.Panel',

    requires: [
        'Ext.form.RadioGroup',
        'Ext.form.field.Radio',
        'Ext.form.FieldSet',
        'Ext.form.field.Number'
    ],

    width: 720,
    autoScroll: true,
    bodyPadding: 10,
    title: 'Свойства абзаца',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'radiogroup',
                    border: 1,
                    maxWidth: 700,
                    padding: 6,
                    fieldLabel: 'Горизонтальное выравнивание',
                    labelWidth: 190,
                    columns: 4,
                    items: [
                        {
                            xtype: 'radiofield',
                            itemId: 'RB_LEFT',
                            boxLabel: 'По левому краю',
                            listeners: {
                                change: {
                                    fn: me.onRB_LEFTChange1,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'radiofield',
                            itemId: 'RB_CENTER',
                            boxLabel: 'По центру',
                            listeners: {
                                change: {
                                    fn: me.onRB_CENTERChange1,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'radiofield',
                            itemId: 'RB_RIGHT',
                            margin: '0 0 0 -30',
                            boxLabel: 'По правому краю',
                            listeners: {
                                change: {
                                    fn: me.onRB_RIGHTChange2,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'radiofield',
                            itemId: 'RB_JUSTIFY',
                            margin: '0 0 0 -20',
                            boxLabel: 'По ширине',
                            listeners: {
                                change: {
                                    fn: me.onRB_RIGHTChange1111,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'fieldset',
                    title: 'Горизонтальные отступы (см)',
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'numberfield',
                            flex: 1,
                            margins: '6',
                            itemId: 'LeftMargin',
                            fieldLabel: 'Слева',
                            labelWidth: 40,
                            listeners: {
                                change: {
                                    fn: me.onLeftMarginChange,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'numberfield',
                            flex: 1,
                            margins: '6',
                            itemId: 'RightMargin',
                            fieldLabel: 'Справа',
                            labelWidth: 50,
                            listeners: {
                                change: {
                                    fn: me.onRightMarginChange,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'numberfield',
                            flex: 1,
                            itemId: 'TextIdent',
                            margin: 6,
                            fieldLabel: 'Первая строка',
                            labelWidth: 95,
                            listeners: {
                                change: {
                                    fn: me.onTextIdentChange,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'checkboxfield',
                    anchor: '100%',
                    itemId: 'BreakBefore',
                    fieldLabel: '',
                    boxLabel: 'Вставить разрыв перед абзацем',
                    listeners: {
                        change: {
                            fn: me.onBreakBeforeChange,
                            scope: me
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },

    onRB_LEFTChange1: function(field, newValue, oldValue, eOpts) {
        if(newValue==true)
        {
            field.ownerCt.down('#RB_CENTER').setValue(false);
            field.ownerCt.down('#RB_RIGHT').setValue(false);
        //    field.ownerCt.down('#RB_START').setValue(false);
        //    field.ownerCt.down('#RB_END').setValue(false);
            field.ownerCt.down('#RB_JUSTIFY').setValue(false);
            this.rawData.TextAlignment=field.itemId;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

        }
    },

    onRB_CENTERChange1: function(field, newValue, oldValue, eOpts) {
        if(newValue==true)
        {
            field.ownerCt.down('#RB_LEFT').setValue(false);
            field.ownerCt.down('#RB_RIGHT').setValue(false);
            //field.ownerCt.down('#RB_START').setValue(false);
            //field.ownerCt.down('#RB_END').setValue(false);
            field.ownerCt.down('#RB_JUSTIFY').setValue(false);
            this.rawData.TextAlignment=field.itemId;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

        }
    },

    onRB_RIGHTChange2: function(field, newValue, oldValue, eOpts) {
        if(newValue==true)
        {
            field.ownerCt.down('#RB_LEFT').setValue(false);
            field.ownerCt.down('#RB_CENTER').setValue(false);
            //field.ownerCt.down('#RB_START').setValue(false);
            //field.ownerCt.down('#RB_END').setValue(false);
            field.ownerCt.down('#RB_JUSTIFY').setValue(false);
            this.rawData.TextAlignment=field.itemId;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

        }
    },

    onRB_RIGHTChange1111: function(field, newValue, oldValue, eOpts) {
        if(newValue==true)
        {
            field.ownerCt.down('#RB_LEFT').setValue(false);
            field.ownerCt.down('#RB_CENTER').setValue(false);
            field.ownerCt.down('#RB_RIGHT').setValue(false);
            //field.ownerCt.down('#RB_START').setValue(false);
            //field.ownerCt.down('#RB_END').setValue(false);
            this.rawData.TextAlignment=field.itemId;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

        }
    },

    onLeftMarginChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.LeftMargin=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onRightMarginChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.RightMargin=newValue;
        var mainContainer = field.findParentByType('#DesignReportMainContainer');
        mainContainer.modified = true;

    },

    onTextIdentChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.TextIdent=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onBreakBeforeChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.BreakBefore=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    LoadNodeValues: function(rawData) {
        this.rawData = rawData;
        var mainContainer = this.findParentByType('#DesignReportMainContainer');
        this.down('#LeftMargin').setValue(rawData.LeftMargin);
        this.down('#RightMargin').setValue(rawData.RightMargin);
        this.down('#BreakBefore').setValue(rawData.BreakBefore);
        this.down('#TextIdent').setValue(rawData.TextIdent);
        this.down('#RB_LEFT').setValue(false);
        this.down('#RB_CENTER').setValue(false);
        this.down('#RB_RIGHT').setValue(false);
        this.down('#RB_JUSTIFY').setValue(false);
        if((this.rawData.TextAlignment!=undefined)&&(this.rawData.TextAlignment!='')){
            this.down('#'+this.rawData.TextAlignment).setValue(true);
        }else{
            this.down('#RB_LEFT').setValue(true);
        }
    }

});