/*
 * File: app/view/label_PropertyForm.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('InputFormDesigner.view.label_PropertyForm', {
  extend: 'Ext.form.Panel',

  requires: [
    'Ext.form.Panel',
    'Ext.form.field.Text',
    'Ext.grid.property.Grid'
  ],

  height: 441,
  id: 'label_PropertyForm',
  itemId: 'label_PropertyForm',
  width: 615,
  layout: 'auto',
  title: 'Свойства надписи',

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'form',
          height: 72,
          autoScroll: true,
          bodyPadding: 7,
          items: [
            {
              xtype: 'textfield',
              anchor: '100%',
              itemId: 'DefaultValue',
              fieldLabel: 'Текст надписи',
              labelWidth: 95,
              listeners: {
                change: {
                  fn: me.onEdt_TextBlockChange,
                  scope: me
                }
              }
            },
            {
              xtype: 'textfield',
              anchor: '100%',
              itemId: 'DataField',
              fieldLabel: 'Код надписи',
              labelWidth: 95,
              listeners: {
                change: {
                  fn: me.onEdt_TextBlockChange1,
                  scope: me
                }
              }
            }
          ]
        },
        {
          xtype: 'propertygrid',
          itemId: 'ContainerProps',
          autoScroll: true,
          bodyBorder: false,
          title: 'Дополнительные свойства надписи',
          nameColumnWidth: 200,
          listeners: {
            beforerender: {
              fn: me.onPropertygridBeforeRender1,
              scope: me
            },
            propertychange: {
              fn: me.onControlPropsPropertyChange1,
              scope: me
            }
          }
        }
      ]
    });

    me.callParent(arguments);
  },

  onEdt_TextBlockChange: function(field, newValue, oldValue, eOpts) {
    var mainContainer = field.ownerCt.findParentByType('#DesignMainContainer');
    mainContainer.modified=true;

    this.rawData.DefaultValue=newValue;
    if(this.needUpdateTree==true){
      if(trim(this.rawData.DefaultValue)=='')
        this.record.set('text', mainContainer.MICaption_Label);
      else
        this.record.set('text', this.rawData.DefaultValue);
      this.record.commit();
      this.rawData.text=this.rawData.DefaultValue;
    }
  },

  onEdt_TextBlockChange1: function(field, newValue, oldValue, eOpts) {
    this.rawData.DataField=newValue;
    var mainContainer = field.ownerCt.findParentByType('#DesignMainContainer');
    mainContainer.modified=true;

  },

  onPropertygridBeforeRender1: function(component, eOpts) {
    var cols = component.getView().getHeaderCt().getGridColumns();
    cols[0].setText("Свойство");
    cols[1].setText("Значение");
  },

  onControlPropsPropertyChange1: function(source, recordId, value, oldValue, eOpts) {
    this.rawData.ContainerProps[recordId]=value;
    var mainContainer = field.ownerCt.findParentByType('#DesignMainContainer');
    mainContainer.modified=true;

  },

  LoadNodeValues: function(rawData, record) {
    this.needUpdateTree=false; //нужно для отключения переписывания текста в дереве при присвоении значений текста
    this.rawData = rawData;
    this.record = record;
    this.rawData.leaf=true;
    var mainContainer = this.findParentByType('#DesignMainContainer');
    this.down('#DefaultValue').setValue(rawData.DefaultValue);
    this.down('#DataField').setValue(rawData.DataField);
    var ContainerProps=mainContainer.down('#ContainerProps');
    if((rawData.LabelProps!=undefined)||(mainContainer.AdditionalLabelDefaultProps!=undefined)){
      //При открытии формы ввода добавить в "Дополнительные свойства" те которые определены для этого элемента ввода и удалить те которых нет.
      var TempObj={};
      for(var key in mainContainer.AdditionalLabelDefaultProps){
        if((rawData.LabelProps!=undefined)&&(rawData.LabelProps[key]!=undefined)){
          TempObj[key]=rawData.LabelProps[key];
        }else{
          TempObj[key]=mainContainer.AdditionalLabelDefaultProps[key];
        }
      }
      rawData.LabelProps=TempObj;
      ContainerProps.setSource(rawData.LabelProps);
    }else{
      ContainerProps.setSource({});
    }
    this.needUpdateTree=true;
  }

});