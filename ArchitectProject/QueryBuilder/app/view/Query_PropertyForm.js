/*
 * File: app/view/Query_PropertyForm.js
 *
 * This file was generated by Sencha Architect version 3.5.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('QueryBuilder.view.Query_PropertyForm', {
    extend: 'Ext.form.Panel',

    requires: [
        'Ext.form.field.Display',
        'Ext.form.field.ComboBox'
    ],

    height: 399,
    itemId: 'Query_PropertyForm',
    width: 608,
    autoScroll: true,
    bodyPadding: 10,
    title: 'Свойства запроса',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'displayfield',
                    anchor: '100%',
                    itemId: 'id_objectDescription',
                    fieldLabel: 'Код объекта'
                },
                {
                    xtype: 'textfield',
                    anchor: '100%',
                    itemId: 'Code',
                    fieldLabel: 'Код запроса',
                    listeners: {
                        change: {
                            fn: me.onEdt_TextBlockChange2,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'textfield',
                    anchor: '100%',
                    itemId: 'Description',
                    fieldLabel: 'Наименование',
                    listeners: {
                        change: {
                            fn: me.onEdt_TextBlockChange,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'combobox',
                    anchor: '100%',
                    itemId: 'GroupCondition',
                    fieldLabel: 'Операция для связи условий',
                    labelWidth: 180,
                    editable: false,
                    store: [
                        'and',
                        'or',
                        'exists'
                    ],
                    listeners: {
                        change: {
                            fn: me.onConditionChange1,
                            scope: me
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },

    onEdt_TextBlockChange2: function(field, newValue, oldValue, eOpts) {
        this.rawData.Code=newValue;
        var DesignMainContainer=field. findParentByType('#DesignMainContainer');
                    DesignMainContainer.modified=true;

    },

    onEdt_TextBlockChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.Description=newValue;
        if(this.needUpdateTree==true){
            this.record.set('text', this.rawData.Description);
            this.record.commit();
            this.rawData.text=this.rawData.Description;
            var DesignMainContainer=field. findParentByType('#DesignMainContainer');
                    DesignMainContainer.modified=true;

        }
    },

    onConditionChange1: function(field, newValue, oldValue, eOpts) {
         this.rawData.GroupCondition=newValue;
        var DesignMainContainer=field. findParentByType('#DesignMainContainer');
                    DesignMainContainer.modified=true;

    },

    LoadNodeValues: function(rawData, record) {
        this.needUpdateTree=false; //нужно для отключения переписывания текста в дереве при присвоении значений текста
        this.rawData = rawData;
        this.record = record;
        var mainContainer = this.findParentByType('#DesignMainContainer');
        this.down('#Description').setValue(rawData.Description);
        this.down('#id_objectDescription').setValue(rawData.id_objectDescription);
        this.down('#Code').setValue(rawData.Code);
        this.down('#GroupCondition').setValue(rawData.GroupCondition);
        this.needUpdateTree=true;
    }

});