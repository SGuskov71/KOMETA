/*
 * File: app/view/text_PropertyForm.js
 *
 * This file was generated by Sencha Architect version 3.5.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Report.view.text_PropertyForm', {
    extend: 'Ext.form.Panel',

    requires: [
        'Ext.form.RadioGroup',
        'Ext.form.field.Radio',
        'Ext.form.field.TextArea',
        'Ext.form.field.ComboBox'
    ],

    itemId: 'text_PropertyForm',
    width: 608,
    autoScroll: true,
    bodyPadding: 10,
    title: 'Свойства текста',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'radiogroup',
                    itemId: 'RG_DataSource',
                    maxWidth: 500,
                    fieldLabel: 'Источник данных',
                    labelWidth: 130,
                    items: [
                        {
                            xtype: 'radiofield',
                            itemId: 'RB_Text',
                            boxLabel: 'Текст',
                            checked: true,
                            listeners: {
                                change: {
                                    fn: me.onRB_TextChange,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'radiofield',
                            itemId: 'RB_SQL',
                            margin: '0 0 0 -50',
                            boxLabel: 'Поле SQL запроса',
                            listeners: {
                                change: {
                                    fn: me.onRB_SQLChange,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'radiofield',
                            itemId: 'RB_Param',
                            margin: '0 0 0 -30',
                            boxLabel: 'Параметр',
                            listeners: {
                                change: {
                                    fn: me.onRB_SQLChange1,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'textareafield',
                    anchor: '100%',
                    itemId: 'Edt_TextBlock',
                    fieldLabel: 'Текст',
                    labelWidth: 85,
                    rows: 7,
                    listeners: {
                        change: {
                            fn: me.onEdt_TextBlockChange,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'combobox',
                    anchor: '100%',
                    hidden: true,
                    itemId: 'ComboReportFieldList',
                    fieldLabel: 'Поле данных',
                    editable: false,
                    displayField: 'id',
                    forceSelection: true,
                    queryMode: 'local',
                    valueField: 'id',
                    listeners: {
                        change: {
                            fn: me.onComboReportFieldListChange,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'combobox',
                    anchor: '100%',
                    hidden: true,
                    itemId: 'ComboParam',
                    fieldLabel: 'Параметр',
                    editable: false,
                    displayField: 'id',
                    forceSelection: true,
                    queryMode: 'local',
                    valueField: 'id',
                    listeners: {
                        change: {
                            fn: me.onComboReportFieldListChange2,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'container',
                    layout: 'column',
                    items: [
                        {
                            xtype: 'combobox',
                            columnWidth: 0.5,
                            itemId: 'ComboTextSyle',
                            fieldLabel: 'Стиль текста',
                            labelWidth: 85,
                            displayField: 'id',
                            forceSelection: true,
                            queryMode: 'local',
                            valueField: 'id',
                            listeners: {
                                change: {
                                    fn: me.onComboReportFieldListChange1,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onRB_TextChange: function(field, newValue, oldValue, eOpts) {
        if(newValue==true)
        {
            this.down('#ComboReportFieldList').hide();
            this.down('#ComboParam').hide();
            this.down('#Edt_TextBlock').show();
            field.ownerCt.down('#RB_SQL').setValue(false);
            field.ownerCt.down('#RB_Param').setValue(false);
            this.rawData.DataSource=field.itemId;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

        }

    },

    onRB_SQLChange: function(field, newValue, oldValue, eOpts) {
        if(newValue==true)
        {
            this.down('#Edt_TextBlock').hide();
             this.down('#ComboParam').hide();
           this.down('#ComboReportFieldList').show();
            field.ownerCt.down('#RB_Text').setValue(false);
            field.ownerCt.down('#RB_Param').setValue(false);
            this.rawData.DataSource=field.itemId;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;
        }
    },

    onRB_SQLChange1: function(field, newValue, oldValue, eOpts) {
        if(newValue==true)
        {
            this.down('#Edt_TextBlock').hide();
            this.down('#ComboReportFieldList').hide();
            this.down('#ComboParam').show();
            field.ownerCt.down('#RB_Text').setValue(false);
            field.ownerCt.down('#RB_SQL').setValue(false);
            this.rawData.DataSource=field.itemId;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;
        }
    },

    onEdt_TextBlockChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.TextBlock=newValue;
        var mainContainer = field.findParentByType('#DesignReportMainContainer');
        mainContainer.modified = true;
        if(this.needUpdateTree==true){
            this.record.set('text', this.rawData.TextBlock);
            this.record.commit();
            this.rawData.text=this.rawData.TextBlock;
        }
    },

    onComboReportFieldListChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.DataField=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

        if(this.needUpdateTree==true){
            this.record.set('text', this.rawData.DataField);
            this.record.commit();
            this.rawData.text=this.rawData.DataField;
        }
    },

    onComboReportFieldListChange2: function(field, newValue, oldValue, eOpts) {
        this.rawData.ParamField=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

        if(this.needUpdateTree==true){
            this.record.set('text', this.rawData.ParamField);
            this.record.commit();
            this.rawData.text=this.rawData.ParamField;
        }
    },

    onComboReportFieldListChange1: function(field, newValue, oldValue, eOpts) {
        this.rawData.TextStyle=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    LoadNodeValues: function(rawData, record) {
        this.needUpdateTree=false; //нужно для отключения переписывания текста в дереве при присвоении значений текста
        this.rawData = rawData;
        this.record = record;
        var mainContainer = this.findParentByType('#DesignReportMainContainer');
        var Combo = this.down('#ComboReportFieldList');
        this.down('#Edt_TextBlock').setValue(rawData.TextBlock);
        this.down('#RB_Text').setValue(false);
        this.down('#RB_SQL').setValue(false);
        if((this.rawData.DataSource!=undefined)&&(this.rawData.DataSource!='')){
            this.down('#'+this.rawData.DataSource).setValue(true);
        }else{
            this.down('#RB_Text').setValue(true);
        }
        //    Combo.reset();
        Combo.getStore().removeAll();
        Ext.Array.each(mainContainer.ComboReportFieldListStoreData, function(value) {
            Combo.store.add({id: value});
        });
        //  Combo.bindStore(Combo.store);
        Combo.setValue(rawData.DataField);

        var ComboTextSyle = this.down('#ComboTextSyle');
        ComboTextSyle.store = new Ext.data.ArrayStore({
            fields: ['id'],
            data: []
        });
        this.FillStyleCombo(ComboTextSyle, rawData.TextStyle);


        var ComboParam = this.down('#ComboParam');
        if (ComboParam.store === undefined)
          ComboParam.store = new Ext.data.ArrayStore({
            fields: ['id'],
            data: []
          });

                ComboParam.getStore().removeAll();
                var report_PropertyForm=mainContainer.ArrayOfReportObjectTypes.report;
                Ext.Array.each(report_PropertyForm.rawData.ReportParams, function(value) {
                    ComboParam.store.add({id: value.ParamCode});
                });
                ComboParam.setValue(rawData.ParamField);


        this.needUpdateTree=true;
    },

    FillStyleCombo: function(StyleCombo, value) {
        Report_class.GetCellStylesArray( function(response, options) {
                var result = response;
                if ((result.success === false) && (result.result == 're_connect')) {
                    Ext.MessageBox.alert('Подключение',result.msg);
             window.onbeforeunload = null;    
                    findFirstWindow().window.location.href = __first_page;
                    return;
                }
                if (result.success) {
                    var arr=result.result;
                    var arrkeys= Object.keys(arr);
                    StyleCombo.getStore().removeAll();
                    Ext.Array.each(arrkeys, function(value) {
                        StyleCombo.store.add({id: value});
                    });
                    StyleCombo.setValue(value);
                }
        });
        StyleCombo.setValue(value);
    }

});