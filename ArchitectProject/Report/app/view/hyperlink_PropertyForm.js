/*
 * File: app/view/hyperlink_PropertyForm.js
 *
 * This file was generated by Sencha Architect version 3.5.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Report.view.hyperlink_PropertyForm', {
    extend: 'Ext.panel.Panel',

    requires: [
        'Ext.form.RadioGroup',
        'Ext.form.field.Radio',
        'Ext.form.field.TextArea',
        'Ext.form.field.ComboBox'
    ],

    width: 620,
    autoScroll: true,
    bodyPadding: 10,
    title: 'Свойства гиперссылки',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'radiogroup',
                    itemId: 'RG_DataSource',
                    maxWidth: 400,
                    fieldLabel: 'Источник данных',
                    labelWidth: 110,
                    items: [
                        {
                            xtype: 'radiofield',
                            itemId: 'RB_Text',
                            boxLabel: 'Текст',
                            checked: true,
                            listeners: {
                                change: {
                                    fn: me.onRB_TextChange11,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'radiofield',
                            itemId: 'RB_SQL',
                            margin: '0 0 0 -50',
                            boxLabel: 'Поле SQL запроса',
                            listeners: {
                                change: {
                                    fn: me.onRB_SQLChange11,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'fieldcontainer',
                    flex: 1,
                    height: 120,
                    itemId: 'ImmediateTextContainer',
                    width: 620,
                    fieldLabel: '',
                    layout: {
                        type: 'vbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'textfield',
                            flex: 1,
                            itemId: 'EdtLinkText',
                            fieldLabel: 'Текст ссылки',
                            listeners: {
                                change: {
                                    fn: me.onEdtLinkTextChange,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'textareafield',
                            itemId: 'EdtLinkURL',
                            fieldLabel: 'URL',
                            listeners: {
                                change: {
                                    fn: me.onEdtLinkURLChange,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'fieldcontainer',
                    height: 200,
                    hidden: true,
                    itemId: 'DataFieldContainer',
                    fieldLabel: '',
                    layout: {
                        type: 'vbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'combobox',
                            itemId: 'ComboReportFieldListLinkText',
                            fieldLabel: 'Поле данных текст ссылки',
                            labelWidth: 140,
                            editable: false,
                            displayField: 'id',
                            forceSelection: true,
                            queryMode: 'local',
                            valueField: 'id',
                            listeners: {
                                change: {
                                    fn: me.onComboReportFieldListChange11,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'combobox',
                            itemId: 'ComboReportFieldListLinkURL',
                            fieldLabel: 'Поле данных URL',
                            labelWidth: 140,
                            editable: false,
                            displayField: 'id',
                            forceSelection: true,
                            queryMode: 'local',
                            valueField: 'id',
                            listeners: {
                                change: {
                                    fn: me.onComboReportFieldListChange111,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'container',
                    flex: 1,
                    layout: 'column',
                    items: [
                        {
                            xtype: 'combobox',
                            columnWidth: 0.5,
                            itemId: 'ComboTextSyle',
                            fieldLabel: 'Стиль текста',
                            labelWidth: 85,
                            displayField: 'id',
                            forceSelection: true,
                            queryMode: 'local',
                            valueField: 'id',
                            listeners: {
                                change: {
                                    fn: me.onComboReportFieldListChange11,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onRB_TextChange11: function(field, newValue, oldValue, eOpts) {
        if(newValue==true)
        {
            this.down('#DataFieldContainer').hide();
            this.down('#ImmediateTextContainer').show();
            field.ownerCt.down('#RB_SQL').setValue(false);
            this.rawData.DataSource=field.itemId;

            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

        }

    },

    onRB_SQLChange11: function(field, newValue, oldValue, eOpts) {
        if(newValue==true)
        {
            this.down('#ImmediateTextContainer').hide();
            this.down('#DataFieldContainer').show();
            field.ownerCt.down('#RB_Text').setValue(false);
            this.rawData.DataSource=field.itemId;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

        }
    },

    onEdtLinkTextChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.LinkText=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onEdtLinkURLChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.LinkURL=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onComboReportFieldListChange11: function(field, newValue, oldValue, eOpts) {
        this.rawData.DBLinkText=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onComboReportFieldListChange111: function(field, newValue, oldValue, eOpts) {
        this.rawData.DBLinkURL=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onComboReportFieldListChange11: function(field, newValue, oldValue, eOpts) {
        this.rawData.TextStyle=newValue;
        var mainContainer = field.findParentByType('#DesignReportMainContainer');
        mainContainer.modified = true;

    },

    LoadNodeValues: function(rawData) {
        this.rawData = rawData;
        var mainContainer = this.findParentByType('#DesignReportMainContainer');
        var ComboReportFieldListLinkText = this.down('#ComboReportFieldListLinkText');
        var ComboReportFieldListLinkURL = this.down('#ComboReportFieldListLinkURL');
        this.down('#EdtLinkText').setValue(rawData.LinkText);
        this.down('#EdtLinkURL').setValue(rawData.LinkURL);
        this.down('#RB_Text').setValue(false);
        this.down('#RB_SQL').setValue(false);
        if((this.rawData.DataSource!=undefined)&&(this.rawData.DataSource!='')){
            this.down('#'+this.rawData.DataSource).setValue(true);
        }else{
            this.down('#RB_Text').setValue(true);
        }

        ComboReportFieldListLinkText.getStore().removeAll();
        Ext.Array.each(mainContainer.ComboReportFieldListStoreData, function(value) {
            ComboReportFieldListLinkText.store.add({id: value});
        });
        ComboReportFieldListLinkText.setValue(rawData.DBLinkText);

        ComboReportFieldListLinkURL.getStore().removeAll();
        Ext.Array.each(mainContainer.ComboReportFieldListStoreData, function(value) {
            ComboReportFieldListLinkURL.store.add({id: value});
        });
        ComboReportFieldListLinkURL.setValue(rawData.DBLinkURL);


        var ComboTextSyle = this.down('#ComboTextSyle');
        ComboTextSyle.store = new Ext.data.ArrayStore({
            fields: ['id'],
            data: []
        });
        this.FillStyleCombo(ComboTextSyle, rawData.TextStyle);


    },

    FillStyleCombo: function(StyleCombo, value) {
        Report_class.GetCellStylesArray( function(response, options) {
                var result = response;
                if ((result.success === false) && (result.result == 're_connect')) {
                    Ext.MessageBox.alert('Подключение',result.msg);
                    window.onbeforeunload = null;
                    findFirstWindow().window.location.href = __first_page;
                    return;
                }
                if (result.success) {
                    var arr=result.result;
                    var arrkeys= Object.keys(arr);
                    StyleCombo.getStore().removeAll();
                    Ext.Array.each(arrkeys, function(value) {
                        StyleCombo.store.add({id: value});
                    });
                    StyleCombo.setValue(value);
                }
        });
        StyleCombo.setValue(value);
    }

});