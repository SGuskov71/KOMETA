/*
 * File: app/view/EditReportStylesWindow.js
 *
 * This file was generated by Sencha Architect version 3.5.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Report.view.EditReportStylesWindow', {
    extend: 'Ext.window.Window',

    requires: [
        'Ext.panel.Tool',
        'Ext.grid.Panel',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.grid.column.Column',
        'Ext.grid.View',
        'Ext.form.FieldSet',
        'Ext.form.field.ComboBox',
        'Ext.form.field.Number',
        'Ext.form.RadioGroup',
        'Ext.form.field.Radio'
    ],

    height: 374,
    width: 868,
    layout: 'fit',
    title: 'Конструктор стилей',
    maximizable: true,
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            tools: [
                {
                    xtype: 'tool',
                    type: 'save',
                    listeners: {
                        click: {
                            fn: me.onToolClick,
                            scope: me
                        }
                    }
                }
            ],
            items: [
                {
                    xtype: 'container',
                    layout: 'border',
                    items: [
                        {
                            xtype: 'gridpanel',
                            region: 'west',
                            split: true,
                            itemId: 'GridStylesList',
                            width: 206,
                            title: 'Список стилей',
                            hideHeaders: true,
                            dockedItems: [
                                {
                                    xtype: 'toolbar',
                                    dock: 'top',
                                    items: [
                                        {
                                            xtype: 'button',
                                            handler: function(button, e) {
                                                var grd=button.findParentByType('gridpanel');
                                                var count = grd.getStore().getCount();
                                                var newIndex = count+1;
                                                var inst= grd.getStore().add({StyleName:'Style'+ newIndex.toString(), Description:'Стиль '+ newIndex.toString(),
                                                        FontColor : '#000000',
                                                        BackgroundColor : '#FFFFFF',
                                                        Underline : true,
                                                        Bold : true,
                                                        Italic : true,
                                                        FontSize : '20',
                                                        TextAlign : 'RB_CENTER',
                                                        VerticalAlign : 'RB_MIDDLE'
                                                    });
                                                grd.getSelectionModel().select(inst, true, false);
                                                grd.getStore().sync();
                                            },
                                            itemId: 'BtnAdd',
                                            iconCls: 'cls_add',
                                            text: '',
                                            tooltip: 'Добавить'
                                        },
                                        {
                                            xtype: 'button',
                                            handler: function(button, e) {
                                                var GridParamList=button.findParentByType('gridpanel');

                                                var selection = GridParamList.getView().getSelectionModel().getSelection()[0];
                                                if (selection) {
                                                    GridParamList.getStore().remove(selection);
                                                }
                                            },
                                            disabled: true,
                                            itemId: 'BtnDelete',
                                            iconCls: 'cls_del',
                                            text: '',
                                            tooltip: 'Удалить'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldset',
                                    dock: 'bottom',
                                    width: 100,
                                    title: '',
                                    layout: {
                                        type: 'hbox',
                                        align: 'stretch'
                                    }
                                }
                            ],
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    draggable: false,
                                    resizable: false,
                                    detachOnRemove: false,
                                    enableColumnHide: false,
                                    dataIndex: 'StyleName',
                                    hideable: false,
                                    text: 'Код Стиля',
                                    flex: 1
                                }
                            ],
                            viewConfig: {
                                itemId: ''
                            },
                            listeners: {
                                selectionchange: {
                                    fn: me.onGridStylesListSelectionChange,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'fieldset',
                            region: 'center',
                            border: 1,
                            itemId: 'ContainerStyleProps',
                            autoScroll: true,
                            title: 'Свойства стиля',
                            layout: {
                                type: 'vbox',
                                align: 'stretch',
                                defaultMargins: {
                                    top: 0,
                                    right: 0,
                                    bottom: 0,
                                    left: 0
                                }
                            },
                            items: [
                                {
                                    xtype: 'textfield',
                                    itemId: 'StyleName',
                                    fieldLabel: 'Код стиля',
                                    labelWidth: 80,
                                    listeners: {
                                        change: {
                                            fn: me.onEdt_ParamCodeChange,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'Description',
                                    fieldLabel: 'Описание',
                                    labelWidth: 80,
                                    listeners: {
                                        change: {
                                            fn: me.onEdt_ParamCodeChange1,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'fieldset',
                                    title: 'Фон',
                                    layout: {
                                        type: 'hbox',
                                        align: 'stretch',
                                        padding: '5 0 10 0'
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            itemId: 'BackgroundColor',
                                            fieldLabel: 'Цвет',
                                            labelWidth: 35,
                                            editable: false,
                                            displayField: 'name',
                                            queryMode: 'local',
                                            valueField: 'id',
                                            listeners: {
                                                change: {
                                                    fn: me.onEdt_ParamTypeInputChange1,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'combobox',
                                            itemId: 'BackgroundImage',
                                            fieldLabel: 'Изображение',
                                            editable: false,
                                            displayField: 'name',
                                            queryMode: 'local',
                                            valueField: 'id',
                                            listeners: {
                                                change: {
                                                    fn: me.onEdt_ParamTypeInputChange11,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldset',
                                    flex: 1,
                                    height: 191,
                                    title: 'Шрифт',
                                    items: [
                                        {
                                            xtype: 'container',
                                            layout: {
                                                type: 'hbox',
                                                padding: '5 0 0 0'
                                            },
                                            items: [
                                                {
                                                    xtype: 'combobox',
                                                    itemId: 'FontColor',
                                                    margin: '0 20 0 0',
                                                    fieldLabel: 'Цвет',
                                                    labelWidth: 35,
                                                    editable: false,
                                                    displayField: 'name',
                                                    queryMode: 'local',
                                                    valueField: 'id',
                                                    listeners: {
                                                        change: {
                                                            fn: me.onEdt_ParamTypeInputChange,
                                                            scope: me
                                                        }
                                                    }
                                                },
                                                {
                                                    xtype: 'numberfield',
                                                    itemId: 'FontSize',
                                                    fieldLabel: 'Размер',
                                                    labelWidth: 49,
                                                    listeners: {
                                                        change: {
                                                            fn: me.onNumberfieldChange,
                                                            scope: me
                                                        }
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            xtype: 'checkboxgroup',
                                            anchor: '100%',
                                            margin: '10 0 10 0',
                                            maxWidth: 500,
                                            fieldLabel: 'Начертание',
                                            items: [
                                                {
                                                    xtype: 'checkboxfield',
                                                    itemId: 'Bold',
                                                    boxLabel: 'Полужирный',
                                                    listeners: {
                                                        change: {
                                                            fn: me.onEdt_ParamMandatoryChange,
                                                            scope: me
                                                        }
                                                    }
                                                },
                                                {
                                                    xtype: 'checkboxfield',
                                                    itemId: 'Italic',
                                                    boxLabel: 'Курсив',
                                                    listeners: {
                                                        change: {
                                                            fn: me.onEdt_ParamCheckInputChange,
                                                            scope: me
                                                        }
                                                    }
                                                },
                                                {
                                                    xtype: 'checkboxfield',
                                                    itemId: 'Underline',
                                                    boxLabel: 'Подчеркнутый',
                                                    listeners: {
                                                        change: {
                                                            fn: me.onEdt_ParamInterractiveChange,
                                                            scope: me
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    xtype: 'radiogroup',
                                    padding: 6,
                                    width: 400,
                                    fieldLabel: 'Вертикальное выравнивание',
                                    columns: 4,
                                    items: [
                                        {
                                            xtype: 'radiofield',
                                            itemId: 'RB_TOP',
                                            boxLabel: 'По верхнему краю',
                                            listeners: {
                                                change: {
                                                    fn: me.onRB_TOPChange,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'radiofield',
                                            itemId: 'RB_MIDDLE',
                                            margin: '0 0 0 10',
                                            boxLabel: 'По центру',
                                            listeners: {
                                                change: {
                                                    fn: me.onRB_MIDDLEChange,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'radiofield',
                                            itemId: 'RB_BOTTOM',
                                            margin: '0 0 0 -20',
                                            boxLabel: 'По нижнему краю',
                                            listeners: {
                                                change: {
                                                    fn: me.onRB_BOTTOMChange,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'radiofield',
                                            itemId: 'RB_AUTO',
                                            margin: '0 0 0 5',
                                            boxLabel: 'По высоте',
                                            listeners: {
                                                change: {
                                                    fn: me.onRB_AUTOChange,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'radiogroup',
                                    border: 1,
                                    height: 43,
                                    padding: 6,
                                    fieldLabel: 'Горизонтальное выравнивание',
                                    columns: 4,
                                    items: [
                                        {
                                            xtype: 'radiofield',
                                            itemId: 'RB_LEFT',
                                            width: '',
                                            boxLabel: 'По левому краю',
                                            listeners: {
                                                change: {
                                                    fn: me.onRB_LEFTChange,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'radiofield',
                                            itemId: 'RB_CENTER',
                                            margin: '0 0 0 10',
                                            boxLabel: 'По центру',
                                            listeners: {
                                                change: {
                                                    fn: me.onRB_CENTERChange,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'radiofield',
                                            itemId: 'RB_RIGHT',
                                            margin: '0 0 0 -20',
                                            boxLabel: 'По правому краю',
                                            listeners: {
                                                change: {
                                                    fn: me.onRB_RIGHTChange,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'radiofield',
                                            itemId: 'RB_JUSTIFY',
                                            margin: '0 0 0 5',
                                            boxLabel: 'По ширине',
                                            listeners: {
                                                change: {
                                                    fn: me.onRB_RIGHTChange111,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ],
            listeners: {
                show: {
                    fn: me.onWindowShow,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    /*  */
    onToolClick: function(tool, e, eOpts) {
        var win=tool.findParentByType('window');
        var GridStylesList = win.down('#GridStylesList');
        var datastore= GridStylesList.getStore();
        new_data = [];
        Ext.each(datastore.getRange(), function (rec) {
            rec.commit();
            new_data.push(rec.data);
        //    new_data[rec.data.StyleName]=rec.data;
        });
        //здесь надо сохранить new_data
        Report_class.SaveCellStylesArray(new_data,function(response, options) {
                Ext.MessageBox.hide();
                var result = response;
                if ((result.success === false) && (result.result == 're_connect')) {
                    Ext.MessageBox.alert('Подключение',result.msg);
                    window.onbeforeunload = null;
                    findFirstWindow().window.location.href = __first_page;
                    return;
                }
                if (result.success) {
                    win.fireEvent('BtnOk');
                    CloseWindow(tool.findParentByType('window')); }
                else {
                        Ext.MessageBox.alert("Ошибка сохранения: " , result.msg);
                    }

        });
    },

    onGridStylesListSelectionChange: function(model, selected, eOpts) {
        var win=model.view.panel.findParentByType('window');
        var ContainerStyleProps = win.down('#ContainerStyleProps');
        var Btn_Delete = model.view.panel.down('#BtnDelete');
        if (selected.length > 0) {
            Btn_Delete.enable();
            ContainerStyleProps.show();
            //выставляю значения компонентов
            win.down('#StyleName').setValue(selected[0].data.StyleName);
            win.down('#Description').setValue(selected[0].data.Description);
            win.down('#FontColor').setValue(selected[0].data.FontColor);

            win.down('#BackgroundColor').setValue(selected[0].data.BackgroundColor);
            win.down('#BackgroundImage').setValue(selected[0].data.BackgroundImage);
            win.down('#Underline').setValue(selected[0].data.Underline);
            win.down('#Bold').setValue(selected[0].data.Bold);
            win.down('#Italic').setValue(selected[0].data.Italic);
            win.down('#FontSize').setValue(selected[0].data.FontSize);

            win.down('#RB_LEFT').setValue(false);
            win.down('#RB_CENTER').setValue(false);
            win.down('#RB_RIGHT').setValue(false);
            //win.down('#RB_START').setValue(false);
            //win.down('#RB_END').setValue(false);
            win.down('#RB_JUSTIFY').setValue(false);
            if((selected[0].data.TextAlign!=undefined)&&(selected[0].data.TextAlign!='')){
                this.down('#'+selected[0].data.TextAlign).setValue(true);
            }else{
                this.down('#RB_LEFT').setValue(true);
            }
            win.down('#RB_TOP').setValue(false);
            win.down('#RB_MIDDLE').setValue(false);
            win.down('#RB_BOTTOM').setValue(false);
            win.down('#RB_AUTO').setValue(false);
            if((selected[0].data.VerticalAlign!=undefined)&&(selected[0].data.VerticalAlign!='')){
                this.down('#'+selected[0].data.VerticalAlign).setValue(true);
            }else{
                this.down('#RB_TOP').setValue(true);
            }
        } else {
            Btn_Delete.disable();
            ContainerStyleProps.hide();
        }

    },

    onEdt_ParamCodeChange: function(field, newValue, oldValue, eOpts) {
        var win=field.findParentByType('window');
        var GridParamList = win.down('#GridStylesList');
        var selection = GridParamList.getView().getSelectionModel().getSelection()[0];
        if (selection) {
            selection.set('StyleName', newValue);
            selection.commit();
        }
    },

    onEdt_ParamCodeChange1: function(field, newValue, oldValue, eOpts) {
        var win=field.findParentByType('window');
        var GridParamList = win.down('#GridStylesList');
        var selection = GridParamList.getView().getSelectionModel().getSelection()[0];
        if (selection) {
            selection.set('Description', newValue);
            selection.commit();
        }
    },

    onEdt_ParamTypeInputChange1: function(field, newValue, oldValue, eOpts) {
        var win=field.findParentByType('window');
        var GridParamList = win.down('#GridStylesList');
        var selection = GridParamList.getView().getSelectionModel().getSelection()[0];
        if (selection) {
            selection.set('BackgroundColor', newValue);
            selection.commit();
        }
    },

    onEdt_ParamTypeInputChange11: function(field, newValue, oldValue, eOpts) {
        var win=field.findParentByType('window');
        var GridParamList = win.down('#GridStylesList');
        var selection = GridParamList.getView().getSelectionModel().getSelection()[0];
        if (selection) {
            selection.set('BackgroundImage', newValue);
            selection.commit();
        }
    },

    onEdt_ParamTypeInputChange: function(field, newValue, oldValue, eOpts) {
        var win=field.findParentByType('window');
        var GridParamList = win.down('#GridStylesList');
        var selection = GridParamList.getView().getSelectionModel().getSelection()[0];
        if (selection) {
            selection.set('FontColor', newValue);
            selection.commit();
        }
    },

    onNumberfieldChange: function(field, newValue, oldValue, eOpts) {
        var win=field.findParentByType('window');
        var GridParamList = win.down('#GridStylesList');
        var selection = GridParamList.getView().getSelectionModel().getSelection()[0];
        if (selection) {
            selection.set('FontSize', newValue);
            selection.commit();
        }
    },

    onEdt_ParamMandatoryChange: function(field, newValue, oldValue, eOpts) {
        var win=field.findParentByType('window');
        var GridParamList = win.down('#GridStylesList');
        var selection = GridParamList.getView().getSelectionModel().getSelection()[0];
        if (selection) {
            selection.set('Bold', newValue);
            selection.commit();
        }
    },

    onEdt_ParamCheckInputChange: function(field, newValue, oldValue, eOpts) {
        var win=field.findParentByType('window');
        var GridParamList = win.down('#GridStylesList');
        var selection = GridParamList.getView().getSelectionModel().getSelection()[0];
        if (selection) {
            selection.set('Italic', newValue);
            selection.commit();
        }
    },

    onEdt_ParamInterractiveChange: function(field, newValue, oldValue, eOpts) {
        var win=field.findParentByType('window');
        var GridParamList = win.down('#GridStylesList');
        var selection = GridParamList.getView().getSelectionModel().getSelection()[0];
        if (selection) {
            selection.set('Underline', newValue);
            selection.commit();
        }
    },

    onRB_TOPChange: function(field, newValue, oldValue, eOpts) {
        if(newValue==true)
        {
            field.ownerCt.down('#RB_MIDDLE').setValue(false);
            field.ownerCt.down('#RB_BOTTOM').setValue(false);
            field.ownerCt.down('#RB_AUTO').setValue(false);
            var win=field.findParentByType('window');
            var GridParamList = win.down('#GridStylesList');
            var selection = GridParamList.getView().getSelectionModel().getSelection()[0];
            if (selection) {
                selection.set('VerticalAlign', field.itemId);
                selection.commit();
            }
        }
    },

    onRB_MIDDLEChange: function(field, newValue, oldValue, eOpts) {
        if(newValue==true)
        {
            field.ownerCt.down('#RB_TOP').setValue(false);
            field.ownerCt.down('#RB_BOTTOM').setValue(false);
            field.ownerCt.down('#RB_AUTO').setValue(false);
            var win=field.findParentByType('window');
            var GridParamList = win.down('#GridStylesList');
            var selection = GridParamList.getView().getSelectionModel().getSelection()[0];
            if (selection) {
                selection.set('VerticalAlign', field.itemId);
                selection.commit();
            }
        }
    },

    onRB_BOTTOMChange: function(field, newValue, oldValue, eOpts) {
        if(newValue==true)
        {
            field.ownerCt.down('#RB_TOP').setValue(false);
            field.ownerCt.down('#RB_MIDDLE').setValue(false);
            field.ownerCt.down('#RB_AUTO').setValue(false);
            var win=field.findParentByType('window');
            var GridParamList = win.down('#GridStylesList');
            var selection = GridParamList.getView().getSelectionModel().getSelection()[0];
            if (selection) {
                selection.set('VerticalAlign', field.itemId);
                selection.commit();
            }
        }
    },

    onRB_AUTOChange: function(field, newValue, oldValue, eOpts) {
        if(newValue==true)
        {
            field.ownerCt.down('#RB_TOP').setValue(false);
            field.ownerCt.down('#RB_MIDDLE').setValue(false);
            field.ownerCt.down('#RB_BOTTOM').setValue(false);
            var win=field.findParentByType('window');
            var GridParamList = win.down('#GridStylesList');
            var selection = GridParamList.getView().getSelectionModel().getSelection()[0];
            if (selection) {
                selection.set('VerticalAlign', field.itemId);
                selection.commit();
            }
        }
    },

    onRB_LEFTChange: function(field, newValue, oldValue, eOpts) {
        if(newValue==true)
        {
            field.ownerCt.down('#RB_CENTER').setValue(false);
            field.ownerCt.down('#RB_RIGHT').setValue(false);
            //field.ownerCt.down('#RB_START').setValue(false);
            //field.ownerCt.down('#RB_END').setValue(false);
            field.ownerCt.down('#RB_JUSTIFY').setValue(false);
            var win=field.findParentByType('window');
            var GridParamList = win.down('#GridStylesList');
            var selection = GridParamList.getView().getSelectionModel().getSelection()[0];
            if (selection) {
                selection.set('TextAlign', field.itemId);
                selection.commit();
            }
        }
    },

    onRB_CENTERChange: function(field, newValue, oldValue, eOpts) {
        if(newValue==true)
        {
            field.ownerCt.down('#RB_LEFT').setValue(false);
            field.ownerCt.down('#RB_RIGHT').setValue(false);
            //field.ownerCt.down('#RB_START').setValue(false);
            //field.ownerCt.down('#RB_END').setValue(false);
            field.ownerCt.down('#RB_JUSTIFY').setValue(false);
            var win=field.findParentByType('window');
            var GridParamList = win.down('#GridStylesList');
            var selection = GridParamList.getView().getSelectionModel().getSelection()[0];
            if (selection) {
                selection.set('TextAlign', field.itemId);
                selection.commit();
            }
        }
    },

    onRB_RIGHTChange: function(field, newValue, oldValue, eOpts) {
        if(newValue==true)
        {
            field.ownerCt.down('#RB_LEFT').setValue(false);
            field.ownerCt.down('#RB_CENTER').setValue(false);
            //field.ownerCt.down('#RB_START').setValue(false);
            //field.ownerCt.down('#RB_END').setValue(false);
            field.ownerCt.down('#RB_JUSTIFY').setValue(false);
            var win=field.findParentByType('window');
            var GridParamList = win.down('#GridStylesList');
            var selection = GridParamList.getView().getSelectionModel().getSelection()[0];
            if (selection) {
                selection.set('TextAlign', field.itemId);
                selection.commit();
            }
        }
    },

    onRB_RIGHTChange111: function(field, newValue, oldValue, eOpts) {
        if(newValue==true)
        {
            field.ownerCt.down('#RB_LEFT').setValue(false);
            field.ownerCt.down('#RB_CENTER').setValue(false);
            field.ownerCt.down('#RB_RIGHT').setValue(false);
            //field.ownerCt.down('#RB_START').setValue(false);
            //field.ownerCt.down('#RB_END').setValue(false);
            var win=field.findParentByType('window');
            var GridParamList = win.down('#GridStylesList');
            var selection = GridParamList.getView().getSelectionModel().getSelection()[0];
            if (selection) {
                selection.set('TextAlign', field.itemId);
                selection.commit();
            }
        }
    },

    onWindowShow: function(component, eOpts) {
        var ContainerStyleProps = component.down('#ContainerStyleProps');
        ContainerStyleProps.hide();

        //загрузить данные для store
        Report_class.GetCellStylesArray(function(response, options) {
                var result = response;
                if ((result.success === false) && (result.result == 're_connect')) {
                    Ext.MessageBox.alert('Подключение',result.msg);
                    window.onbeforeunload = null;
                    findFirstWindow().window.location.href = __first_page;
                    return;
                }
                if (result.success) {
                    var store = Ext.create('Ext.data.Store', {
                        fields: ['StyleName', 'Description',
                                 'FontColor', 'BackgroundColor','BackgroundImage',
                                 'Underline', 'Bold', 'Italic',
                                 'FontSize','TextAlign','VerticalAlign'],
                        data: null
                    });
                    var arr=result.result;
                    var arrkeys= Object.keys(arr);
                    Ext.Array.each(arrkeys, function(value) {
                        store.add(arr[value]);
                    });
                    var GridStylesList = component.down('#GridStylesList');
                    GridStylesList.store=store;
                    GridStylesList.bindStore(store);
                }
        });

        var ComboColor =component.down('#FontColor');
        ComboColor.store = new Ext.data.ArrayStore({
            fields: ['id', 'name'],
            data: []
        });
        ComboColor.getStore().removeAll();
        Ext.Array.each(component.mainContainer.ComboColorListStoreData, function(value) {
            ComboColor.store.add(value);
        });
        var ComboColor =component.down('#BackgroundColor');
        ComboColor.store = new Ext.data.ArrayStore({
            fields: ['id', 'name'],
            data: []
        });
        ComboColor.getStore().removeAll();
        Ext.Array.each(component.mainContainer.ComboColorListStoreData, function(value) {
            ComboColor.store.add(value);
        });


        var ComboImage =component.down('#BackgroundImage');
        ComboImage.store = new Ext.data.ArrayStore({
            fields: ['id', 'name'],
            data: []
        });
        ComboImage.getStore().removeAll();
        Ext.Array.each(component.mainContainer.ComboImageListStoreData, function(value) {
            ComboImage.store.add(value);
        });


    }

});