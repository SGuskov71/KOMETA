/*
 * File: app/view/report_PropertyForm.js
 *
 * This file was generated by Sencha Architect version 3.5.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Report.view.report_PropertyForm', {
    extend: 'Ext.panel.Panel',

    requires: [
        'Ext.panel.Panel',
        'Ext.form.field.TextArea',
        'Ext.panel.Tool',
        'Ext.form.FieldSet',
        'Ext.form.RadioGroup',
        'Ext.form.field.Radio',
        'Ext.form.field.Number'
    ],

    itemId: 'report_PropertyForm',
    bodyPadding: 10,
    title: 'Свойства шаблона',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'textfield',
                    itemId: 'Edt_description',
                    fieldLabel: 'Наименование',
                    listeners: {
                        change: {
                            fn: me.onEdt_descriptionChange,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'textfield',
                    itemId: 'Edt_Code',
                    width: 150,
                    fieldLabel: 'Код шаблона',
                    listeners: {
                        change: {
                            fn: me.onEdt_descriptionChange1,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'panel',
                    flex: 1,
                    itemId: 'PanelSQL',
                    layout: 'fit',
                    title: 'Текст SQL-запроса',
                    items: [
                        {
                            xtype: 'textareafield',
                            itemId: 'EdtSQL',
                            width: 150,
                            fieldLabel: '',
                            rows: 6,
                            listeners: {
                                blur: {
                                    fn: me.onEdtSQLBlur,
                                    scope: me
                                }
                            }
                        }
                    ],
                    tools: [
                        {
                            xtype: 'tool',
                            tooltip: 'Открыть текст запроса в отдельном окне',
                            type: 'maximize',
                            listeners: {
                                click: {
                                    fn: me.onToolClick,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'textareafield',
                    itemId: 'EdtSQLConditions',
                    fieldLabel: 'Дополнительные условия запроса',
                    labelWidth: 110,
                    rows: 6,
                    listeners: {
                        change: {
                            fn: me.onEdtSQLConditionsChange1,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'fieldset',
                    height: 102,
                    layout: 'column',
                    title: 'Параметры страницы',
                    items: [
                        {
                            xtype: 'fieldset',
                            columnWidth: 0.15,
                            title: 'Ориентация',
                            items: [
                                {
                                    xtype: 'radiogroup',
                                    width: 300,
                                    labelWidth: 80,
                                    layout: {
                                        type: 'vbox',
                                        align: 'stretch'
                                    },
                                    items: [
                                        {
                                            xtype: 'radiofield',
                                            itemId: 'RB_PORTRAIT',
                                            boxLabel: 'Книжная',
                                            listeners: {
                                                change: {
                                                    fn: me.onRB_PORTRAITChange,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'radiofield',
                                            itemId: 'RB_LANDSCAPE',
                                            boxLabel: 'Альбомная',
                                            listeners: {
                                                change: {
                                                    fn: me.onRB_LANDSCAPEChange,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'fieldset',
                            columnWidth: 0.25,
                            title: 'Размер бумаги (см)',
                            layout: {
                                type: 'vbox',
                                align: 'stretchmax'
                            },
                            items: [
                                {
                                    xtype: 'numberfield',
                                    flex: 1,
                                    border: 4,
                                    itemId: 'PageSizeWidth',
                                    margin: 3,
                                    fieldLabel: 'Ширина',
                                    labelWidth: 49,
                                    decimalPrecision: 1,
                                    step: 0.1,
                                    listeners: {
                                        change: {
                                            fn: me.onPageSizeWidthChange,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'numberfield',
                                    flex: 1,
                                    border: 4,
                                    itemId: 'PageSizeHeight',
                                    margin: '3 3 6 3 ',
                                    fieldLabel: 'Высота',
                                    labelWidth: 49,
                                    decimalPrecision: 1,
                                    step: 0.1,
                                    listeners: {
                                        change: {
                                            fn: me.onPageSizeHeightChange,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'fieldset',
                            columnWidth: 0.35,
                            title: 'Поля (см)',
                            layout: {
                                type: 'vbox',
                                align: 'stretchmax'
                            },
                            items: [
                                {
                                    xtype: 'container',
                                    flex: 1,
                                    layout: {
                                        type: 'hbox',
                                        align: 'stretch'
                                    },
                                    items: [
                                        {
                                            xtype: 'numberfield',
                                            flex: 1,
                                            border: 4,
                                            itemId: 'MarginLeft',
                                            margin: 3,
                                            width: 142,
                                            fieldLabel: 'Слева',
                                            labelWidth: 42,
                                            decimalPrecision: 1,
                                            step: 0.1,
                                            listeners: {
                                                change: {
                                                    fn: me.onMarginLeftChange,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            flex: 1,
                                            border: 4,
                                            itemId: 'MarginRight',
                                            margin: 3,
                                            width: 149,
                                            fieldLabel: 'Справа',
                                            labelWidth: 49,
                                            decimalPrecision: 1,
                                            step: 0.1,
                                            listeners: {
                                                change: {
                                                    fn: me.onMarginRightChange,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'container',
                                    flex: 1,
                                    layout: {
                                        type: 'hbox',
                                        align: 'stretch'
                                    },
                                    items: [
                                        {
                                            xtype: 'numberfield',
                                            flex: 1,
                                            border: 4,
                                            itemId: 'MarginTop',
                                            margin: '3 3 6 3',
                                            width: 149,
                                            fieldLabel: 'Сверху',
                                            labelWidth: 49,
                                            decimalPrecision: 1,
                                            step: 0.1,
                                            listeners: {
                                                change: {
                                                    fn: me.onMarginTopChange,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            flex: 1,
                                            border: 4,
                                            itemId: 'MarginBottom',
                                            margin: '3 3 6 3',
                                            width: 142,
                                            fieldLabel: 'Снизу',
                                            labelWidth: 42,
                                            decimalPrecision: 1,
                                            step: 0.1,
                                            listeners: {
                                                change: {
                                                    fn: me.onMarginBottomChange,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'fieldset',
                            columnWidth: 0.25,
                            title: 'Нумерация страниц',
                            layout: {
                                type: 'vbox',
                                align: 'stretchmax'
                            },
                            items: [
                                {
                                    xtype: 'checkboxfield',
                                    itemId: 'ShowPAGE_NUMBER',
                                    margin: 3,
                                    fieldLabel: '',
                                    boxLabel: 'Добавить нумерацию страниц',
                                    listeners: {
                                        change: {
                                            fn: me.onShowPAGE_NUMBERChange,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'checkboxfield',
                                    itemId: 'FirstPageNumber',
                                    margin: '3 3 6 3',
                                    fieldLabel: '',
                                    boxLabel: 'Номер на первой странице',
                                    listeners: {
                                        change: {
                                            fn: me.onShowPAGE_NUMBERChange1,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'numberfield',
                                    hidden: true,
                                    itemId: 'PageStartNumber',
                                    fieldLabel: 'Начинать нумерацию с (не работает)',
                                    labelWidth: 400,
                                    allowDecimals: false,
                                    allowExponential: false,
                                    decimalPrecision: 0,
                                    listeners: {
                                        change: {
                                            fn: me.onNumberfieldChange,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'checkboxfield',
                    itemId: 'ChkShowError',
                    fieldLabel: '',
                    boxLabel: 'Выводить сообщение об ошибке выполнения запроса',
                    listeners: {
                        change: {
                            fn: me.onChkShowErrorChange,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'checkboxfield',
                    itemId: 'ChkShowEmptyMessage',
                    fieldLabel: '',
                    boxLabel: 'Выводить сообщение о пустом результате выполнения запроса',
                    listeners: {
                        change: {
                            fn: me.onChkShowEmptyMessageChange,
                            scope: me
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },

    onEdt_descriptionChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.description=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onEdt_descriptionChange1: function(field, newValue, oldValue, eOpts) {
        this.rawData.Code=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onEdtSQLBlur: function(component, e, eOpts) {
        this.rawData.SQL=component.value;
            var mainContainer = component.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

                      Report_class.GetSQLFieldsList(SQLText, function(response, options) {
                          Ext.MessageBox.hide();
                          var result = response;
                          if ((result.success === false) && (result.result == 're_connect')) {
                              Ext.MessageBox.alert('Подключение',result.msg);
 window.onbeforeunload = null;
                          findFirstWindow().window.location.href = __first_page;
                              return;
                          }
                          if (result.success) {
                              var mainContainer= component.findParentByType('#DesignReportMainContainer');
                              mainContainer.ComboReportFieldListStoreData= result.result;// сохраняю список полей отчета для выбора из комбо
                              //report_PropertyForm.rawData.SQL=SQLText;
                          } else {
                              Ext.MessageBox.alert("Ошибка выполнения SQL запроса : " , result.msg);
                          }
                      });

    },

    onToolClick: function(tool, e, eOpts) {
        var report_PropertyForm=tool.findParentByType('#report_PropertyForm');

        SQLEditor(report_PropertyForm.down('#EdtSQL').getValue(),function(SQLText)
                  {
                                            report_PropertyForm.down('#EdtSQL').setValue(SQLText);
            var mainContainer = tool.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;


                  }
                 );
    },

    onEdtSQLConditionsChange1: function(field, newValue, oldValue, eOpts) {
        this.rawData.SQLConditions=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onRB_PORTRAITChange: function(field, newValue, oldValue, eOpts) {
        if(newValue==true)
        {
            field.ownerCt.down('#RB_LANDSCAPE').setValue(false);
            this.rawData.PageOrientation=field.itemId;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;
        }
    },

    onRB_LANDSCAPEChange: function(field, newValue, oldValue, eOpts) {
        if(newValue==true)
        {
            field.ownerCt.down('#RB_PORTRAIT').setValue(false);
            this.rawData.PageOrientation=field.itemId;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;
        }
    },

    onPageSizeWidthChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.PageSizeWidth=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onPageSizeHeightChange: function(field, newValue, oldValue, eOpts) {
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;
        this.rawData.PageSizeHeight=newValue;
    },

    onMarginLeftChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.MarginLeft=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onMarginRightChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.MarginRight=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onMarginTopChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.MarginTop=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onMarginBottomChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.MarginBottom=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onShowPAGE_NUMBERChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.ShowPAGE_NUMBER=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onShowPAGE_NUMBERChange1: function(field, newValue, oldValue, eOpts) {
        this.rawData.FirstPageNumber=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onNumberfieldChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.PageStartNumber=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onChkShowErrorChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.ShowError=newValue;
            var mainContainer = field.findParentByType('#DesignReportMainContainer');
            mainContainer.modified = true;

    },

    onChkShowEmptyMessageChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.ShowEmptyMessage=newValue;
        var mainContainer = field.findParentByType('#DesignReportMainContainer');
        mainContainer.modified = true;

    },

    LoadNodeValues: function(rawData) {
        this.rawData=rawData;
        this.down('#Edt_Code').setValue(rawData.Code);
        this.down('#Edt_description').setValue(rawData.description);
        this.down('#EdtSQL').setValue(rawData.SQL);
        this.down('#EdtSQLConditions').setValue(rawData.SQLConditions);
        this.down('#ChkShowError').setValue(rawData.ShowError);
        this.down('#ChkShowEmptyMessage').setValue(rawData.ShowEmptyMessage);
        this.down('#ShowPAGE_NUMBER').setValue(rawData.ShowPAGE_NUMBER);
        this.down('#PageStartNumber').setValue(rawData.PageStartNumber);
        this.down('#FirstPageNumber').setValue(rawData.FirstPageNumber);
        this.down('#PageSizeWidth').setValue(rawData.PageSizeWidth);
        this.down('#PageSizeHeight').setValue(rawData.PageSizeHeight);
        this.down('#MarginLeft').setValue(rawData.MarginLeft);
        this.down('#MarginRight').setValue(rawData.MarginRight);
        this.down('#MarginTop').setValue(rawData.MarginTop);
        this.down('#MarginBottom').setValue(rawData.MarginBottom);
        this.down('#RB_PORTRAIT').setValue(false);
        this.down('#RB_LANDSCAPE').setValue(false);
        if((this.rawData.PageOrientation!=undefined)&&(this.rawData.PageOrientation!='')){
            this.down('#'+this.rawData.PageOrientation).setValue(true);
        }else{
            this.down('#RB_PORTRAIT').setValue(true);
        }
    }

});