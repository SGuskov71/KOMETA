/*
 * File: app/view/DesignMainContainer.js
 *
 * This file was generated by Sencha Architect version 3.5.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('QueryBuilder.view.DesignMainContainer', {
    extend: 'Ext.container.Container',

    requires: [
        'Ext.tree.Panel',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.menu.Menu',
        'Ext.menu.Item',
        'Ext.toolbar.Spacer',
        'Ext.toolbar.Separator',
        'Ext.tree.View'
    ],

    height: 513,
    itemId: 'DesignMainContainer',
    width: 793,
    layout: 'border',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'treepanel',
                    region: 'west',
                    split: true,
                    itemId: 'StructureTree',
                    width: 186,
                    title: 'Структура',
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            items: [
                                {
                                    xtype: 'button',
                                    itemId: 'BtnAdd',
                                    iconCls: 'cls_add',
                                    tooltip: 'Добавить',
                                    menu: {
                                        xtype: 'menu',
                                        items: [
                                            {
                                                xtype: 'menuitem',
                                                itemId: 'MI_ConditionGroup',
                                                text: 'Группа условий',
                                                listeners: {
                                                    click: {
                                                        fn: me.onMI_ConditionGroupClick,
                                                        scope: me
                                                    }
                                                }
                                            },
                                            {
                                                xtype: 'menuitem',
                                                itemId: 'MI_Condition',
                                                text: 'Условие',
                                                listeners: {
                                                    click: {
                                                        fn: me.onMI_ConditionClick,
                                                        scope: me
                                                    }
                                                }
                                            },
                                            {
                                                xtype: 'menuitem',
                                                itemId: 'MI_Limit',
                                                text: 'Ограничение по связи',
                                                listeners: {
                                                    click: {
                                                        fn: me.onMI_LimitClick,
                                                        scope: me
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        function removeAllChildContainers(Node){
                                            NodeChild=Node.firstChild;
                                            while(NodeChild!=undefined){
                                                if(NodeChild.hasChildNodes()==true){
                                                    removeAllChildContainers(NodeChild);
                                                }
                                                var tempNode=NodeChild;
                                                NodeChild=NodeChild.nextSibling;
                                                try {
                                                    tempNode.remove(true);
                                                } catch (e) {}
                                                }
                                            }
                                            var DesignMainContainer=button. findParentByType('#DesignMainContainer');
                                            var StructureTree= button. findParentByType('#DesignMainContainer').down('#StructureTree') ;
                                            var Node= StructureTree.getSelectionModel().getSelection();
                                            if(Node!= undefined){
                                                Node=Node[0];
                                                if((Node!= undefined)&&(Node!=StructureTree.getRootNode())){
                                                    var Node2Select= Node.previousSibling;
                                                    if(Node2Select==undefined){Node2Select= Node.parentNode;}
                                                    try {
                                                        removeAllChildContainers(Node);
                                                        Node.removeAll(true);
                                                        DesignMainContainer.modified=true;
                                                    } catch (e) {
                                                    } finally {
                                                        try{
                                                            Node.remove(true);
                                                            DesignMainContainer.modified=true;
                                                        } catch (e) {}
                                                        }
                                                        StructureTree.store.sync();
                                                        StructureTree.getSelectionModel().select(Node2Select);
                                                    }}
                                    },
                                    disabled: true,
                                    itemId: 'BtnDel',
                                    iconCls: 'cls_del',
                                    text: '',
                                    tooltip: 'Удалить'
                                },
                                {
                                    xtype: 'tbspacer',
                                    width: 5
                                },
                                {
                                    xtype: 'tbseparator'
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        var mainContainer= button.findParentByType('#DesignMainContainer');
                                        var StructureTree= mainContainer.down('#StructureTree') ;
                                        var RootNode= StructureTree.getRootNode();
                                        if(RootNode!= undefined){
                                            if (!RootNode.raw.isNew)
                                            {
                                                mainContainer.SaveForm(true, function() {
                                                    mainContainer.query_class.GetStoredQueryCondition(mainContainer.Grid,{param_list:{code: RootNode.raw.Code,
                                                        ParamValuesArray: {}
                                                    }
                                                });

                                            });
                                        }else
                                        {Ext.MessageBox.alert('Ошибка сохранения','Сначала надо сохранить форму');}}
                                    },
                                    itemId: 'BtnRun',
                                    iconCls: 'cls_run',
                                    text: '',
                                    tooltip: 'Выполнить запрос'
                                },
                                {
                                    xtype: 'tbspacer',
                                    width: 5
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        var mainContainer = button.findParentByType('#DesignMainContainer');
                                        var Query_PropertyForm=mainContainer.ArrayOfObjectTypes.Query;
                                        var w=  Ext.create("Params.view.EditParams", {Params: Query_PropertyForm.rawData.QueryParams});
                                        w.mainContainer= mainContainer;
                                        w.addEvents('BtnOk');
                                        w.show();
                                        w.addListener('BtnOk', function(QueryParams) {
                                            Query_PropertyForm.rawData.QueryParams=QueryParams;
                                            var DesignMainContainer=button. findParentByType('#DesignMainContainer');
                                            DesignMainContainer.modified=true;
                                            CloseWindow(w);
                                        });

                                    },
                                    itemId: 'BtnEditParam',
                                    iconCls: 'cls_params',
                                    text: '',
                                    tooltip: 'Редактировать параметры запроса'
                                }
                            ]
                        }
                    ],
                    viewConfig: {
                        autoScroll: true
                    },
                    listeners: {
                        afterrender: {
                            fn: me.onStructureTreeAfterRender,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'panel',
                    flex: 1,
                    region: 'center',
                    split: false,
                    itemId: 'PropPanel',
                    layout: 'fit',
                    items: [
                        {
                            xtype: 'panel',
                            itemId: 'PropertyContainer',
                            layout: 'fit',
                            header: false,
                            title: 'Свойства'
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onMI_ConditionGroupClick: function(item, e, eOpts) {
        var DesignMainContainer=item.findParentByType('#DesignMainContainer');
        var StructureTree= item. findParentByType('#DesignMainContainer').down('#StructureTree') ;
        var Node= StructureTree.getSelectionModel().getSelection();
        if(Node!= undefined){
            Node=Node[0];
            if(Node!= undefined){
                if(!((Node.raw.ItemType=='Query')||(Node.raw.ItemType=='GroupParam')||(Node.raw.ItemType=='Link'))){
                    Node=Node.parentNode; //если это не группа и не запрос то берем родителя
                }
                var Props=DesignMainContainer.AdditionalContainerDefaultProps;
                var newNode=Node.appendChild({text: item.text, expanded: true, leaf:false,children: [],
                                              ItemType: 'GroupParam',
                                              iconCls: 'GroupParam',
                                              GroupCondition:'and'});
                DesignMainContainer.modified=true;
                StructureTree.getView().select(newNode);
            }
        }
    },

    onMI_ConditionClick: function(item, e, eOpts) {
        var DesignMainContainer=item.findParentByType('#DesignMainContainer');
        var StructureTree= DesignMainContainer.down('#StructureTree') ;
        var RootNode= StructureTree.getRootNode();
        var Node= StructureTree.getSelectionModel().getSelection();
        if(Node!= undefined){
            Node=Node[0];
            if(Node!= undefined){
                var StoreData= DesignMainContainer.GetMasterObjectFieldListStoreData(Node);
                var w=  Ext.create("QueryBuilder.view.SelectFieldWindow", {StoreData:StoreData});
                w.addEvents('BtnOk');
                w.show();
                w.addListener('BtnOk', function(SelectedRecords) {
                    Ext.Array.each(SelectedRecords, function (SelectedRecordObj) {
                        var SelectedRecord=SelectedRecordObj.raw;
                        var tempData=DesignMainContainer.GetItemConditionListStoreData(DesignMainContainer.GetMasterObjectNode(Node), SelectedRecord.field_code);
                        var oper= null;
                        if(Object.keys(tempData).length>0)
                            oper=Ext.Object.getKeys(tempData)[0];
                        var ConfigObject=new Object({text: SelectedRecord.field_descr, expanded: true, leaf:true,children: null,iconCls:'Param',
                                                     ItemType: 'FieldCondition',
                                                     Caption:SelectedRecord.field_descr,
                                                     DataSource: 'RB_Value',
                                                     Operation:oper,
                                                     DataField:SelectedRecord.field_code
                                                    });
                        if((Node.raw.ItemType=='Query')||(Node.raw.ItemType=='GroupParam')||(Node.raw.ItemType=='Link')){
                            NewNode= Node.appendChild(ConfigObject);
                        }else
                            if(Node.raw.ItemType=='FieldCondition'){
                                var ParentNode=Node.parentNode;
                                var ItemIndex=ParentNode.indexOf(Node);
                                NewNode=  ParentNode.insertChild(ItemIndex, ConfigObject);
                            }
                        DesignMainContainer.modified=true;
                    });

                    StructureTree.getView().select(NewNode);
                    CloseWindow(w);
                });
            };}
    },

    onMI_LimitClick: function(item, e, eOpts) {
        var DesignMainContainer=item.findParentByType('#DesignMainContainer');
        var id_object=DesignMainContainer.id_object;
        var StructureTree= item. findParentByType('#DesignMainContainer').down('#StructureTree') ;
        var Node= StructureTree.getSelectionModel().getSelection();
        if(Node!= undefined){
            Node=Node[0];
            if(Node!= undefined){
                if((Node.raw.ItemType=='Query')||(Node.raw.ItemType=='GroupParam')||(Node.raw.ItemType=='Link')){
                    Node=Node;
                }else if((Node.raw.ItemType=='FieldCondition')){
                    Node=Node.parentNode;
                }

                var win = SelectValSlv({sysname: 'sv_mb_object_link'
                                        , ExtFilterWhereCond: ' and id_object_parent='+id_object
                                        , object_Caption: 'Выбор объекта для определения ограничения по связи', HelpContext: ''});
                win.addListener('ValSlvSelected', function (context, SelID, SelDescr) {
                    Common_class.get_link_info(SelID.id_link, function(response){
                        //var sysname =response;
                        var ConfigObject={text: item.text, expanded: true, leaf:false,children: [],
                                          isMasterObject : true,
                                          ItemType: 'Link',
                                          iconCls: 'Link',
                                          GroupCondition : 'and',
                                          id_link: SelID.id_link,
                                          sysname:response.sysname,
                                          id_objectDescription:response.full_name
                                         };
                        var NewNode= Node.appendChild(ConfigObject);
                        DesignMainContainer.modified=true;
                        DesignMainContainer.LockTree();
                        DesignMainContainer.MasterObjectCount=1;
                        DesignMainContainer.MasterObjectLoadedCount=0;
                        DesignMainContainer.LoadMasterObjectSettings(NewNode);
                        StructureTree.getView().select(NewNode);
                    }
                                            );
                });
            }
        }
    },

    onStructureTreeAfterRender: function(component, eOpts) {
        //component.getView().select(component.getRootNode());
        var mainContainer= component.findParentByType('#DesignMainContainer');
        mainContainer.LoadMasterObjectsNodesSettings(component.getRootNode());//загружаю настройки проектирования во все MasterObjectsNode
    },

    ReloadParamStore: function() {

    },

    /* находит ветку объекта для которой простроена данная CurNode ветка запроса */
    GetMasterObjectNode: function(CurNode) {
        if(CurNode==undefined)return null;
        if((CurNode.raw.isMasterObject!=undefined)&&(CurNode.raw.isMasterObject==true)){return CurNode;}
        var tempNode= CurNode.parentNode;
        while(tempNode){
            if((tempNode.raw.isMasterObject!=undefined)&&(tempNode.raw.isMasterObject==true)){return tempNode;}else{
                tempNode= tempNode.parentNode;
            }}if(tempNode==undefined)return null;
    },

    /* пробегаюсь по дереву и загружаю настройки проектирования во все MasterObjectsNode */
    LoadMasterObjectsNodesSettings: function(RootNode) {
        var mainContainer= this;
        mainContainer.MasterObjectCount=0;
        mainContainer.MasterObjectLoadedCount=0;
        mainContainer.LockTree();
        RootNode.cascadeBy(function(node){
            if(node.raw.isMasterObject===true){
                mainContainer.MasterObjectCount++;
                mainContainer.LoadMasterObjectSettings(node);
            }
        });
        mainContainer.UnlockTree();
    },

    /* загружаю настройки проектирования в Node */
    LoadMasterObjectSettings: function(Node) {
        var mainContainer= this;
        GridFilter_class.GetFieldList(Node.raw.sysname,true, function (response) {
            var Res = response;
            if ((Res.success === false) && (Res.result == 're_connect')) {
                Ext.MessageBox.alert('Подключение',Res.msg);
                window.onbeforeunload = null;
                findFirstWindow().window.location.href = __first_page;
                return;
            }
            else if (Res.success === false) {
                Ext.MessageBox.alert('Подключение',Res.msg);
                return;
            }
            FilterSettings = Res.result;
            Node.FilterSettings=FilterSettings;
            mainContainer.MasterObjectLoadedCount++;
            if(mainContainer.MasterObjectCount>1)
                mainContainer.UnlockTree();
            else
                mainContainer.UnlockTree(Node);
        }

                                       );
    },

    /* разблокирует дерево если количество обработанных узлов равно заданному и выделяет ветку SelNode */
    UnlockTree: function(SelNode) {
        var mainContainer= this;
        var StructureTree= mainContainer.down('#StructureTree') ;
        if(mainContainer.MasterObjectCount===mainContainer.MasterObjectLoadedCount){
            mainContainer.MasterObjectCount=0;
            mainContainer.MasterObjectLoadedCount=0;
            Ext.MessageBox.hide();
            StructureTree.enable();
            if(SelNode!==undefined)StructureTree.getView().select(SelNode);
            else StructureTree.getView().select(StructureTree.getRootNode());
        }

    },

    /* блокирует дерево пока идет загрузка даннвх в ветку MasterObject */
    LockTree: function() {
        var mainContainer= this;
        var StructureTree= mainContainer.down('#StructureTree') ;
        StructureTree.getView().deselect();
        StructureTree.disable();
        Ext.MessageBox.wait({
            msg: 'Выполняется операция. Ждите...',
            width: 300,
            wait: true,
            waitConfig: {interval: 100}
        });
    },

    /* возвращает данные для хрананилища комбо выбора условия выражения из MasterObject по имени поля оперирующего в выражении */
    GetItemConditionListStoreData: function(MasterObject, FieldName) {
        var res=[];
        if(MasterObject==undefined)return res;
        if(MasterObject.FilterSettings==undefined)return res;
        Ext.Array.each(MasterObject.FilterSettings, function (Obj) {
            if(Obj.field_code===FieldName){
                res=Obj.condition_list;
                return true;
            }
        });
        return res;
    },

    /* ищет от Node ветку с MasterObject и из нее возвращает набор данных для store окна выбора поля объекта  */
    GetMasterObjectFieldListStoreData: function(Node) {
        if(Node==undefined)return [];
        if((Node.raw.isMasterObject!=undefined)&&(Node.raw.isMasterObject==true)){
            return Node.FilterSettings;
        }else{
            var tempNode= Node.parentNode;
            while(tempNode){
                if((tempNode.raw.isMasterObject!=undefined)&&(tempNode.raw.isMasterObject==true)){
                    return tempNode.FilterSettings;
                }else{
                    tempNode= tempNode.parentNode;
                }
            }
            if(tempNode==undefined)return [];
        }
    },

    SaveForm: function(SuccessSilent, callback) {
                    var mainContainer = this;
                    var StructureTree = mainContainer.down('#StructureTree');
                    var RootNode = StructureTree.getRootNode();
                    if (RootNode != undefined) {
                      var InputFormTemplate = mainContainer.query_class.SaveQueryNodeToJson(RootNode);
                      Ext.MessageBox.wait({
                        msg: 'Выполняется операция. Ждите...',
                        width: 300,
                        wait: true,
                        waitConfig: {interval: 100}
                      });
                      InputFormTemplate.id_stored_query = mainContainer.id_stored_query;

                      QueryBuilder_class.SaveQueryTemplate(InputFormTemplate, function (response, options) {
                        Ext.MessageBox.hide();
                        var result = response;
                        if ((result.success === false) && (result.result == 're_connect')) {
                          Ext.MessageBox.alert('Подключение', result.msg);
                          findFirstWindow().window.location.href = _URLProjectRoot + 'index.php';
                          return;
                        }
                        if (result.success) {
                          mainContainer.id_stored_query = result.result;
                          mainContainer.Grid.ReloadGrid();
                          Ext.MessageBox.alert("Результат выполнения ", result.msg);
                          if(SuccessSilent==true)
                                    Ext.MessageBox.hide();
                                if (callback) {
                                    callback();
                                }
                          return true;
                        } else {
                          Ext.MessageBox.alert("Ошибка сохранения: ", result.msg);
                        }
                      });
                    }

    }

});