/*
 * File: app/view/container_PropertyForm.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('InputFormDesigner.view.container_PropertyForm', {
  extend: 'Ext.form.Panel',

  requires: [
    'Ext.form.Panel',
    'Ext.form.field.Checkbox',
    'Ext.form.field.ComboBox',
    'Ext.grid.property.Grid'
  ],

  height: 441,
  id: 'container_PropertyForm',
  itemId: 'container_PropertyForm',
  width: 615,
  layout: 'auto',
  title: 'Свойства контейнера',

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'form',
          height: 80,
          autoScroll: true,
          bodyPadding: 7,
          layout: {
            type: 'vbox',
            align: 'stretch'
          },
          items: [
            {
              xtype: 'textfield',
              itemId: 'Edt_Caption',
              fieldLabel: 'Заголовок',
              listeners: {
                change: {
                  fn: me.onEdt_TextBlockChange,
                  scope: me
                }
              }
            },
            {
              xtype: 'checkboxfield',
              hidden: true,
              itemId: 'ShowBorder',
              width: 150,
              fieldLabel: '',
              boxLabel: 'Показывать рамку контейнера',
              listeners: {
                change: {
                  fn: me.onShowBorderChange,
                  scope: me
                }
              }
            },
            {
              xtype: 'combobox',
              hidden: true,
              itemId: 'Layout',
              width: 150,
              fieldLabel: 'Способ размещения объектов внутри контейнера',
              labelWidth: 200,
              readOnly: true,
              readOnlyCls: 'x-item-disabled-readonly',
              editable: false,
              store: [
                'auto',
                'border',
                'column',
                'fit',
                'hbox',
                'vbox'
              ],
              listeners: {
                change: {
                  fn: me.onLayoutChange,
                  scope: me
                }
              }
            },
            {
              xtype: 'combobox',
              itemId: 'ComboInputContainerLayouts',
              width: 150,
              fieldLabel: 'Шаблон размещения объектов внутри контейнера',
              labelWidth: 200,
              editable: false,
              displayField: 'caption',
              queryMode: 'local',
              valueField: 'code',
              listeners: {
                change: {
                  fn: me.onLayoutChange1,
                  scope: me
                }
              }
            }
          ]
        },
        {
          xtype: 'propertygrid',
          itemId: 'ContainerProps',
          autoScroll: true,
          bodyBorder: false,
          title: 'Дополнительные свойства контейнера',
          nameColumnWidth: 200,
          listeners: {
            beforerender: {
              fn: me.onPropertygridBeforeRender1,
              scope: me
            },
            propertychange: {
              fn: me.onControlPropsPropertyChange1,
              scope: me
            }
          }
        }
      ]
    });

    me.callParent(arguments);
  },

  onEdt_TextBlockChange: function(field, newValue, oldValue, eOpts) {
    var mainContainer = field.ownerCt.findParentByType('#DesignMainContainer');
    mainContainer.modified=true;

    this.rawData.Caption=newValue;
    if(this.needUpdateTree==true){
      if(trim(this.rawData.Caption)=='')
        this.record.set('text', mainContainer.MICaption_Container);
      else
        this.record.set('text', this.rawData.Caption);
      this.record.commit();
      this.rawData.text=this.rawData.Caption;
    }
  },

  onShowBorderChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.ShowBorder=newValue;
    var mainContainer = field.ownerCt.findParentByType('#DesignMainContainer');
    mainContainer.modified=true;

  },

  onLayoutChange: function(field, newValue, oldValue, eOpts) {
        this.rawData.Layout=newValue;
    var mainContainer = field.ownerCt.findParentByType('#DesignMainContainer');
    mainContainer.modified=true;

  },

  onLayoutChange1: function(field, newValue, oldValue, eOpts) {
        this.rawData.InputContainerLayouts=newValue;
    var mainContainer = field.ownerCt.findParentByType('#DesignMainContainer');
    mainContainer.modified=true;

  },

  onPropertygridBeforeRender1: function(component, eOpts) {
    var cols = component.getView().getHeaderCt().getGridColumns();
    cols[0].setText("Свойство");
    cols[1].setText("Значение");
  },

  onControlPropsPropertyChange1: function(source, recordId, value, oldValue, eOpts) {
    this.rawData.ContainerProps[recordId]=value;
    var mainContainer = field.ownerCt.findParentByType('#DesignMainContainer');
    mainContainer.modified=true;

  },

  LoadNodeValues: function(rawData, record) {
    this.needUpdateTree=false; //нужно для отключения переписывания текста в дереве при присвоении значений текста
    this.rawData = rawData;
    this.record = record;
    var mainContainer = this.findParentByType('#DesignMainContainer');
    this.down('#Edt_Caption').setValue(rawData.Caption);
    this.down('#Layout').setValue(rawData.Layout);
    this.down('#ComboInputContainerLayouts').setValue(rawData.InputContainerLayouts);
    this.down('#ShowBorder').setValue(rawData.ShowBorder);
    var ContainerProps=mainContainer.down('#ContainerProps');
    if((rawData.ContainerProps!=undefined)||(mainContainer.AdditionalContainerDefaultProps!=undefined)){
      //При открытии формы ввода добавить в "Дополнительные свойства" те которые определены для этого элемента ввода и удалить те которых нет.
      var TempObj={};
      for(var key in mainContainer.AdditionalContainerDefaultProps){
        if((rawData.ContainerProps!=undefined)&&(rawData.ContainerProps[key]!=undefined)){
          TempObj[key]=rawData.ContainerProps[key];
        }else{
          TempObj[key]=mainContainer.AdditionalContainerDefaultProps[key];
        }
      }
      rawData.ContainerProps=TempObj;
      ContainerProps.setSource(rawData.ContainerProps);
    }else{
      ContainerProps.setSource({});
    }
    this.needUpdateTree=true;
  }

});