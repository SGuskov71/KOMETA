/*
 * File: app/view/SelectFieldWindow.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('InputFormDesigner.view.SelectFieldWindow', {
  extend: 'Ext.window.Window',

  requires: [
    'Ext.toolbar.Toolbar',
    'Ext.button.Button',
    'Ext.toolbar.Separator',
    'Ext.grid.Panel',
    'Ext.grid.column.Column',
    'Ext.grid.View',
    'Ext.selection.CheckboxModel'
  ],

  height: 325,
  id: 'SelectFieldWindow',
  itemId: 'SelectFieldWindow',
  width: 531,
  layout: 'fit',
  title: 'Список полей данных',
  maximizable: true,
  modal: true,

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      dockedItems: [
        {
          xtype: 'toolbar',
          dock: 'bottom',
          layout: {
            type: 'hbox',
            pack: 'end'
          },
          items: [
            {
              xtype: 'button',
              disabled: true,
              itemId: 'BtnSelect',
              text: 'Выбрать',
              listeners: {
                click: {
                  fn: me.onButtonSelectClick,
                  scope: me
                }
              }
            },
            {
              xtype: 'tbseparator'
            },
            {
              xtype: 'button',
              text: 'Закрыть',
              listeners: {
                click: {
                  fn: me.onCloseButtonClick,
                  scope: me
                }
              }
            }
          ]
        }
      ],
      items: [
        {
          xtype: 'gridpanel',
          itemId: 'GridList',
          columns: [
            {
              xtype: 'gridcolumn',
              dataIndex: 'short_name',
              text: 'Наименование поля',
              flex: 1
            },
            {
              xtype: 'gridcolumn',
              width: 120,
              dataIndex: 'fieldname',
              text: 'Код поля'
            }
          ],
          listeners: {
            selectionchange: {
              fn: me.onGridListReportSelectionChange,
              scope: me
            },
            itemdblclick: {
              fn: me.onGridListReportItemDblClick,
              scope: me
            }
          },
          selModel: Ext.create('Ext.selection.CheckboxModel', {

          })
        }
      ],
      listeners: {
        show: {
          fn: me.onWindowShow,
          scope: me
        }
      }
    });

    me.callParent(arguments);
  },

  onButtonSelectClick: function(button, e, eOpts) {
    var win=button.findParentByType('window');
    var _grid_ListAnalPanel=win.down('#GridList');
    win.fireEvent('BtnOk',
                  _grid_ListAnalPanel.getSelectionModel().getSelection());
  },

  onCloseButtonClick: function(button, e, eOpts) {
    CloseWindow(button.findParentByType('window'));
  },

  onGridListReportSelectionChange: function(model, selected, eOpts) {
    if (selected.length > 0) {
        this.down('#BtnSelect').enable();
    } else {
        this.down('#BtnSelect').disable();
    }
  },

  onGridListReportItemDblClick: function(dataview, record, item, index, e, eOpts) {
     this.onButtonSelectClick(this.down('#BtnSelect'));
  },

  onWindowShow: function(component, eOpts) {
    var store_ListReportTemplate = new Ext.data.Store({
        fields: [{name: 'id_field', type: 'int'},
          {name: 'short_name', type: 'string'},
          {name: 'id_field_type', type: 'int'},
          {name: 'id_field_style', type: 'int'},
          {name: 'is_visibility', type: 'boolean'},
          {name: 'id_slv_object', type: 'int'},
          {name: 'mandatory', type: 'boolean'},
          {name: 'is_field_readonly', type: 'boolean'},
          {name: 'width', type: 'int'},
          {name: 'input_check_condition', type: 'string'},
          {name: 'fieldname', type: 'string'}
        ],
        pageSize: 1000000,
              proxy: {
            type: 'direct',
            directFn: 'InputForm_class.GetListField',
            extraParams: {
              id_object: component.id_object},
            reader: {
            type: 'json',
            root: 'result'
          }
        },
        autoLoad: true});

    this.down('#GridList').getView().bindStore(store_ListReportTemplate);
  }

});